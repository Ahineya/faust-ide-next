"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypelistContext = exports.FunContext = exports.SignatureContext = exports.TypeContext = exports.NameContext = exports.StringContext = exports.NumberContext = exports.VallistContext = exports.FstringContext = exports.UqstringContext = exports.IdentContext = exports.CaseruleContext = exports.FoutputsContext = exports.FinputsContext = exports.FprodContext = exports.FsumContext = exports.FseqContext = exports.FparContext = exports.SoundfileContext = exports.HbargraphContext = exports.VbargraphContext = exports.TgroupContext = exports.HgroupContext = exports.VgroupContext = exports.NentryContext = exports.HsliderContext = exports.VsliderContext = exports.CheckboxContext = exports.ButtonContext = exports.FvariableContext = exports.FconstContext = exports.FfunctionContext = exports.PrimitiveContext = exports.InfixexprContext = exports.ExpressionContext = exports.WithdefContext = exports.ParamsContext = exports.ArgumentContext = exports.DeflistContext = exports.RecnameContext = exports.RecinitionContext = exports.ReclistContext = exports.ArglistContext = exports.DefnameContext = exports.DefinitionContext = exports.StatementContext = exports.ImportStatementContext = exports.VariantContext = exports.ProgramContext = exports.VariantstatementContext = void 0;
// Generated from FaustParser.g4 by ANTLR 4.9.2
// jshint ignore: start
const antlr4_1 = __importDefault(require("antlr4"));
const FaustParserListener_js_1 = __importDefault(require("./FaustParserListener.js"));
const FaustParserVisitor_js_1 = __importDefault(require("./FaustParserVisitor.js"));
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003s\u02dd\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u0003\u0002\u0006\u0002h\n\u0002\r\u0002\u000e\u0002",
    "i\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0007\u0003p\n\u0003",
    "\f\u0003\u000e\u0003s\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004{\n\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u0090\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u009f\n\u0007",
    "\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u00a9\n\t\f\t\u000e\t\u00ac\u000b\t\u0003\n\u0007\n\u00af\n\n\f\n",
    "\u000e\n\u00b2\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0006\r\u00be\n",
    "\r\r\r\u000e\r\u00bf\u0003\r\u0003\r\u0005\r\u00c4\n\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u00d2",
    "\n\u000e\f\u000e\u000e\u000e\u00d5\u000b\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u00dd\n",
    "\u000f\f\u000f\u000e\u000f\u00e0\u000b\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0007\u0010\u00e6\n\u0010\f\u0010\u000e\u0010",
    "\u00e9\u000b\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0106",
    "\n\u0011\f\u0011\u000e\u0011\u0109\u000b\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u014c\n\u0012\f\u0012",
    "\u000e\u0012\u014f\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0157\n\u0012\f\u0012\u000e",
    "\u0012\u015a\u000b\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0006\u0013\u01ac\n",
    "\u0013\r\u0013\u000e\u0013\u01ad\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u01c3\n",
    "\u0013\f\u0013\u000e\u0013\u01c6\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u01e8\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(",
    "\u0003)\u0003)\u0003*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0007,\u02a3\n,\f,\u000e,\u02a6\u000b,\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u02b2",
    "\n-\u0003.\u0003.\u0003/\u0003/\u00030\u00030\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u02c5\n1\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00052\u02d0",
    "\n2\u00033\u00033\u00033\u00033\u00033\u00033\u00073\u02d8\n3\f3\u000e",
    "3\u02db\u000b3\u00033\u0002\t\u0010\u001a\u001c \"Vd4\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bd\u0002\u0005\u0003\u0002\u0007\b\u0004",
    "\u0002llnn\u0003\u0002,-\u0002\u033e\u0002g\u0003\u0002\u0002\u0002",
    "\u0004q\u0003\u0002\u0002\u0002\u0006z\u0003\u0002\u0002\u0002\b|\u0003",
    "\u0002\u0002\u0002\n\u008f\u0003\u0002\u0002\u0002\f\u009e\u0003\u0002",
    "\u0002\u0002\u000e\u00a0\u0003\u0002\u0002\u0002\u0010\u00a2\u0003\u0002",
    "\u0002\u0002\u0012\u00b0\u0003\u0002\u0002\u0002\u0014\u00b3\u0003\u0002",
    "\u0002\u0002\u0016\u00b8\u0003\u0002\u0002\u0002\u0018\u00c3\u0003\u0002",
    "\u0002\u0002\u001a\u00c5\u0003\u0002\u0002\u0002\u001c\u00d6\u0003\u0002",
    "\u0002\u0002\u001e\u00e7\u0003\u0002\u0002\u0002 \u00ea\u0003\u0002",
    "\u0002\u0002\"\u010a\u0003\u0002\u0002\u0002$\u01e7\u0003\u0002\u0002",
    "\u0002&\u01e9\u0003\u0002\u0002\u0002(\u01f2\u0003\u0002\u0002\u0002",
    "*\u01fa\u0003\u0002\u0002\u0002,\u0202\u0003\u0002\u0002\u0002.\u0207",
    "\u0003\u0002\u0002\u00020\u020c\u0003\u0002\u0002\u00022\u0219\u0003",
    "\u0002\u0002\u00024\u0226\u0003\u0002\u0002\u00026\u0233\u0003\u0002",
    "\u0002\u00028\u023a\u0003\u0002\u0002\u0002:\u0241\u0003\u0002\u0002",
    "\u0002<\u0248\u0003\u0002\u0002\u0002>\u0251\u0003\u0002\u0002\u0002",
    "@\u025a\u0003\u0002\u0002\u0002B\u0261\u0003\u0002\u0002\u0002D\u026a",
    "\u0003\u0002\u0002\u0002F\u0273\u0003\u0002\u0002\u0002H\u027c\u0003",
    "\u0002\u0002\u0002J\u0285\u0003\u0002\u0002\u0002L\u028a\u0003\u0002",
    "\u0002\u0002N\u028f\u0003\u0002\u0002\u0002P\u0296\u0003\u0002\u0002",
    "\u0002R\u0298\u0003\u0002\u0002\u0002T\u029a\u0003\u0002\u0002\u0002",
    "V\u029c\u0003\u0002\u0002\u0002X\u02b1\u0003\u0002\u0002\u0002Z\u02b3",
    "\u0003\u0002\u0002\u0002\\\u02b5\u0003\u0002\u0002\u0002^\u02b7\u0003",
    "\u0002\u0002\u0002`\u02c4\u0003\u0002\u0002\u0002b\u02cf\u0003\u0002",
    "\u0002\u0002d\u02d1\u0003\u0002\u0002\u0002fh\u0005\u0006\u0004\u0002",
    "gf\u0003\u0002\u0002\u0002hi\u0003\u0002\u0002\u0002ig\u0003\u0002\u0002",
    "\u0002ij\u0003\u0002\u0002\u0002jk\u0003\u0002\u0002\u0002kl\u0005\n",
    "\u0006\u0002l\u0003\u0003\u0002\u0002\u0002mp\u0005\n\u0006\u0002np",
    "\u0005\u0002\u0002\u0002om\u0003\u0002\u0002\u0002on\u0003\u0002\u0002",
    "\u0002ps\u0003\u0002\u0002\u0002qo\u0003\u0002\u0002\u0002qr\u0003\u0002",
    "\u0002\u0002rt\u0003\u0002\u0002\u0002sq\u0003\u0002\u0002\u0002tu\u0007",
    "\u0002\u0002\u0003u\u0005\u0003\u0002\u0002\u0002v{\u0007g\u0002\u0002",
    "w{\u0007h\u0002\u0002x{\u0007i\u0002\u0002y{\u0007j\u0002\u0002zv\u0003",
    "\u0002\u0002\u0002zw\u0003\u0002\u0002\u0002zx\u0003\u0002\u0002\u0002",
    "zy\u0003\u0002\u0002\u0002{\u0007\u0003\u0002\u0002\u0002|}\u0007\\",
    "\u0002\u0002}~\u0007 \u0002\u0002~\u007f\u0005R*\u0002\u007f\u0080\u0007",
    "!\u0002\u0002\u0080\u0081\u0007\u001e\u0002\u0002\u0081\t\u0003\u0002",
    "\u0002\u0002\u0082\u0090\u0005\b\u0005\u0002\u0083\u0084\u0007d\u0002",
    "\u0002\u0084\u0085\u0005\\/\u0002\u0085\u0086\u0005Z.\u0002\u0086\u0087",
    "\u0007\u001e\u0002\u0002\u0087\u0090\u0003\u0002\u0002\u0002\u0088\u0089",
    "\u0007d\u0002\u0002\u0089\u008a\u0005\\/\u0002\u008a\u008b\u0005\\/",
    "\u0002\u008b\u008c\u0005Z.\u0002\u008c\u008d\u0007\u001e\u0002\u0002",
    "\u008d\u0090\u0003\u0002\u0002\u0002\u008e\u0090\u0005\f\u0007\u0002",
    "\u008f\u0082\u0003\u0002\u0002\u0002\u008f\u0083\u0003\u0002\u0002\u0002",
    "\u008f\u0088\u0003\u0002\u0002\u0002\u008f\u008e\u0003\u0002\u0002\u0002",
    "\u0090\u000b\u0003\u0002\u0002\u0002\u0091\u0092\u0005\u000e\b\u0002",
    "\u0092\u0093\u0007 \u0002\u0002\u0093\u0094\u0005\u0010\t\u0002\u0094",
    "\u0095\u0007!\u0002\u0002\u0095\u0096\u0007\u001f\u0002\u0002\u0096",
    "\u0097\u0005 \u0011\u0002\u0097\u0098\u0007\u001e\u0002\u0002\u0098",
    "\u009f\u0003\u0002\u0002\u0002\u0099\u009a\u0005\u000e\b\u0002\u009a",
    "\u009b\u0007\u001f\u0002\u0002\u009b\u009c\u0005 \u0011\u0002\u009c",
    "\u009d\u0007\u001e\u0002\u0002\u009d\u009f\u0003\u0002\u0002\u0002\u009e",
    "\u0091\u0003\u0002\u0002\u0002\u009e\u0099\u0003\u0002\u0002\u0002\u009f",
    "\r\u0003\u0002\u0002\u0002\u00a0\u00a1\u0005P)\u0002\u00a1\u000f\u0003",
    "\u0002\u0002\u0002\u00a2\u00a3\b\t\u0001\u0002\u00a3\u00a4\u0005\u001a",
    "\u000e\u0002\u00a4\u00aa\u0003\u0002\u0002\u0002\u00a5\u00a6\f\u0003",
    "\u0002\u0002\u00a6\u00a7\u0007\u0006\u0002\u0002\u00a7\u00a9\u0005\u001a",
    "\u000e\u0002\u00a8\u00a5\u0003\u0002\u0002\u0002\u00a9\u00ac\u0003\u0002",
    "\u0002\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00aa\u00ab\u0003\u0002",
    "\u0002\u0002\u00ab\u0011\u0003\u0002\u0002\u0002\u00ac\u00aa\u0003\u0002",
    "\u0002\u0002\u00ad\u00af\u0005\u0014\u000b\u0002\u00ae\u00ad\u0003\u0002",
    "\u0002\u0002\u00af\u00b2\u0003\u0002\u0002\u0002\u00b0\u00ae\u0003\u0002",
    "\u0002\u0002\u00b0\u00b1\u0003\u0002\u0002\u0002\u00b1\u0013\u0003\u0002",
    "\u0002\u0002\u00b2\u00b0\u0003\u0002\u0002\u0002\u00b3\u00b4\u0005\u0016",
    "\f\u0002\u00b4\u00b5\u0007\u001f\u0002\u0002\u00b5\u00b6\u0005 \u0011",
    "\u0002\u00b6\u00b7\u0007\u001e\u0002\u0002\u00b7\u0015\u0003\u0002\u0002",
    "\u0002\u00b8\u00b9\u0007\u0010\u0002\u0002\u00b9\u00ba\u0005P)\u0002",
    "\u00ba\u0017\u0003\u0002\u0002\u0002\u00bb\u00c4\u0005\f\u0007\u0002",
    "\u00bc\u00be\u0005\u0006\u0004\u0002\u00bd\u00bc\u0003\u0002\u0002\u0002",
    "\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002",
    "\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002",
    "\u00c1\u00c2\u0005\f\u0007\u0002\u00c2\u00c4\u0003\u0002\u0002\u0002",
    "\u00c3\u00bb\u0003\u0002\u0002\u0002\u00c3\u00bd\u0003\u0002\u0002\u0002",
    "\u00c4\u0019\u0003\u0002\u0002\u0002\u00c5\u00c6\b\u000e\u0001\u0002",
    "\u00c6\u00c7\u0005\"\u0012\u0002\u00c7\u00d3\u0003\u0002\u0002\u0002",
    "\u00c8\u00c9\f\u0006\u0002\u0002\u00c9\u00ca\u0007\u0005\u0002\u0002",
    "\u00ca\u00d2\u0005\u001a\u000e\u0006\u00cb\u00cc\f\u0005\u0002\u0002",
    "\u00cc\u00cd\t\u0002\u0002\u0002\u00cd\u00d2\u0005\u001a\u000e\u0005",
    "\u00ce\u00cf\f\u0004\u0002\u0002\u00cf\u00d0\u0007\t\u0002\u0002\u00d0",
    "\u00d2\u0005\u001a\u000e\u0005\u00d1\u00c8\u0003\u0002\u0002\u0002\u00d1",
    "\u00cb\u0003\u0002\u0002\u0002\u00d1\u00ce\u0003\u0002\u0002\u0002\u00d2",
    "\u00d5\u0003\u0002\u0002\u0002\u00d3\u00d1\u0003\u0002\u0002\u0002\u00d3",
    "\u00d4\u0003\u0002\u0002\u0002\u00d4\u001b\u0003\u0002\u0002\u0002\u00d5",
    "\u00d3\u0003\u0002\u0002\u0002\u00d6\u00d7\b\u000f\u0001\u0002\u00d7",
    "\u00d8\u0005P)\u0002\u00d8\u00de\u0003\u0002\u0002\u0002\u00d9\u00da",
    "\f\u0003\u0002\u0002\u00da\u00db\u0007\u0006\u0002\u0002\u00db\u00dd",
    "\u0005P)\u0002\u00dc\u00d9\u0003\u0002\u0002\u0002\u00dd\u00e0\u0003",
    "\u0002\u0002\u0002\u00de\u00dc\u0003\u0002\u0002\u0002\u00de\u00df\u0003",
    "\u0002\u0002\u0002\u00df\u001d\u0003\u0002\u0002\u0002\u00e0\u00de\u0003",
    "\u0002\u0002\u0002\u00e1\u00e6\u0005\f\u0007\u0002\u00e2\u00e3\u0005",
    "\u0006\u0004\u0002\u00e3\u00e4\u0005\f\u0007\u0002\u00e4\u00e6\u0003",
    "\u0002\u0002\u0002\u00e5\u00e1\u0003\u0002\u0002\u0002\u00e5\u00e2\u0003",
    "\u0002\u0002\u0002\u00e6\u00e9\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003",
    "\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u001f\u0003",
    "\u0002\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00ea\u00eb\b",
    "\u0011\u0001\u0002\u00eb\u00ec\u0005\"\u0012\u0002\u00ec\u0107\u0003",
    "\u0002\u0002\u0002\u00ed\u00ee\f\u0007\u0002\u0002\u00ee\u00ef\u0007",
    "\t\u0002\u0002\u00ef\u0106\u0005 \u0011\b\u00f0\u00f1\f\u0006\u0002",
    "\u0002\u00f1\u00f2\u0007\u0006\u0002\u0002\u00f2\u0106\u0005 \u0011",
    "\u0006\u00f3\u00f4\f\u0005\u0002\u0002\u00f4\u00f5\u0007\u0005\u0002",
    "\u0002\u00f5\u0106\u0005 \u0011\u0005\u00f6\u00f7\f\u0004\u0002\u0002",
    "\u00f7\u00f8\t\u0002\u0002\u0002\u00f8\u0106\u0005 \u0011\u0004\u00f9",
    "\u00fa\f\b\u0002\u0002\u00fa\u00fb\u0007)\u0002\u0002\u00fb\u00fc\u0007",
    "\"\u0002\u0002\u00fc\u00fd\u0005\u0012\n\u0002\u00fd\u00fe\u0007#\u0002",
    "\u0002\u00fe\u0106\u0003\u0002\u0002\u0002\u00ff\u0100\f\u0003\u0002",
    "\u0002\u0100\u0101\u0007(\u0002\u0002\u0101\u0102\u0007\"\u0002\u0002",
    "\u0102\u0103\u0005\u001e\u0010\u0002\u0103\u0104\u0007#\u0002\u0002",
    "\u0104\u0106\u0003\u0002\u0002\u0002\u0105\u00ed\u0003\u0002\u0002\u0002",
    "\u0105\u00f0\u0003\u0002\u0002\u0002\u0105\u00f3\u0003\u0002\u0002\u0002",
    "\u0105\u00f6\u0003\u0002\u0002\u0002\u0105\u00f9\u0003\u0002\u0002\u0002",
    "\u0105\u00ff\u0003\u0002\u0002\u0002\u0106\u0109\u0003\u0002\u0002\u0002",
    "\u0107\u0105\u0003\u0002\u0002\u0002\u0107\u0108\u0003\u0002\u0002\u0002",
    "\u0108!\u0003\u0002\u0002\u0002\u0109\u0107\u0003\u0002\u0002\u0002",
    "\u010a\u010b\b\u0012\u0001\u0002\u010b\u010c\u0005$\u0013\u0002\u010c",
    "\u0158\u0003\u0002\u0002\u0002\u010d\u010e\f\u0016\u0002\u0002\u010e",
    "\u010f\u0007\u000f\u0002\u0002\u010f\u0157\u0005\"\u0012\u0017\u0110",
    "\u0111\f\u0013\u0002\u0002\u0111\u0112\u0007K\u0002\u0002\u0112\u0157",
    "\u0005\"\u0012\u0014\u0113\u0114\f\u0012\u0002\u0002\u0114\u0115\u0007",
    "\u0014\u0002\u0002\u0115\u0157\u0005\"\u0012\u0013\u0116\u0117\f\u0011",
    "\u0002\u0002\u0117\u0118\u0007\u0015\u0002\u0002\u0118\u0157\u0005\"",
    "\u0012\u0012\u0119\u011a\f\u0010\u0002\u0002\u011a\u011b\u0007\f\u0002",
    "\u0002\u011b\u0157\u0005\"\u0012\u0011\u011c\u011d\f\u000f\u0002\u0002",
    "\u011d\u011e\u0007\r\u0002\u0002\u011e\u0157\u0005\"\u0012\u0010\u011f",
    "\u0120\f\u000e\u0002\u0002\u0120\u0121\u0007\u000e\u0002\u0002\u0121",
    "\u0157\u0005\"\u0012\u000f\u0122\u0123\f\r\u0002\u0002\u0123\u0124\u0007",
    "\n\u0002\u0002\u0124\u0157\u0005\"\u0012\u000e\u0125\u0126\f\f\u0002",
    "\u0002\u0126\u0127\u0007\u000b\u0002\u0002\u0127\u0157\u0005\"\u0012",
    "\r\u0128\u0129\f\u000b\u0002\u0002\u0129\u012a\u0007\u0011\u0002\u0002",
    "\u012a\u0157\u0005\"\u0012\f\u012b\u012c\f\n\u0002\u0002\u012c\u012d",
    "\u0007\u0012\u0002\u0002\u012d\u0157\u0005\"\u0012\u000b\u012e\u012f",
    "\f\t\u0002\u0002\u012f\u0130\u0007\u0013\u0002\u0002\u0130\u0157\u0005",
    "\"\u0012\n\u0131\u0132\f\b\u0002\u0002\u0132\u0133\u0007\u0016\u0002",
    "\u0002\u0133\u0157\u0005\"\u0012\t\u0134\u0135\f\u0007\u0002\u0002\u0135",
    "\u0136\u0007\u0017\u0002\u0002\u0136\u0157\u0005\"\u0012\b\u0137\u0138",
    "\f\u0006\u0002\u0002\u0138\u0139\u0007\u0018\u0002\u0002\u0139\u0157",
    "\u0005\"\u0012\u0007\u013a\u013b\f\u0005\u0002\u0002\u013b\u013c\u0007",
    "\u0019\u0002\u0002\u013c\u0157\u0005\"\u0012\u0006\u013d\u013e\f\u0004",
    "\u0002\u0002\u013e\u013f\u0007\u001a\u0002\u0002\u013f\u0157\u0005\"",
    "\u0012\u0005\u0140\u0141\f\u0003\u0002\u0002\u0141\u0142\u0007\u001b",
    "\u0002\u0002\u0142\u0157\u0005\"\u0012\u0004\u0143\u0144\f\u0018\u0002",
    "\u0002\u0144\u0145\u0007 \u0002\u0002\u0145\u0146\u0005\u0010\t\u0002",
    "\u0146\u0147\u0007!\u0002\u0002\u0147\u0157\u0003\u0002\u0002\u0002",
    "\u0148\u0149\f\u0017\u0002\u0002\u0149\u014d\u0007$\u0002\u0002\u014a",
    "\u014c\u0005\u0018\r\u0002\u014b\u014a\u0003\u0002\u0002\u0002\u014c",
    "\u014f\u0003\u0002\u0002\u0002\u014d\u014b\u0003\u0002\u0002\u0002\u014d",
    "\u014e\u0003\u0002\u0002\u0002\u014e\u0150\u0003\u0002\u0002\u0002\u014f",
    "\u014d\u0003\u0002\u0002\u0002\u0150\u0157\u0007%\u0002\u0002\u0151",
    "\u0152\f\u0015\u0002\u0002\u0152\u0157\u0007\u0010\u0002\u0002\u0153",
    "\u0154\f\u0014\u0002\u0002\u0154\u0155\u0007\'\u0002\u0002\u0155\u0157",
    "\u0005P)\u0002\u0156\u010d\u0003\u0002\u0002\u0002\u0156\u0110\u0003",
    "\u0002\u0002\u0002\u0156\u0113\u0003\u0002\u0002\u0002\u0156\u0116\u0003",
    "\u0002\u0002\u0002\u0156\u0119\u0003\u0002\u0002\u0002\u0156\u011c\u0003",
    "\u0002\u0002\u0002\u0156\u011f\u0003\u0002\u0002\u0002\u0156\u0122\u0003",
    "\u0002\u0002\u0002\u0156\u0125\u0003\u0002\u0002\u0002\u0156\u0128\u0003",
    "\u0002\u0002\u0002\u0156\u012b\u0003\u0002\u0002\u0002\u0156\u012e\u0003",
    "\u0002\u0002\u0002\u0156\u0131\u0003\u0002\u0002\u0002\u0156\u0134\u0003",
    "\u0002\u0002\u0002\u0156\u0137\u0003\u0002\u0002\u0002\u0156\u013a\u0003",
    "\u0002\u0002\u0002\u0156\u013d\u0003\u0002\u0002\u0002\u0156\u0140\u0003",
    "\u0002\u0002\u0002\u0156\u0143\u0003\u0002\u0002\u0002\u0156\u0148\u0003",
    "\u0002\u0002\u0002\u0156\u0151\u0003\u0002\u0002\u0002\u0156\u0153\u0003",
    "\u0002\u0002\u0002\u0157\u015a\u0003\u0002\u0002\u0002\u0158\u0156\u0003",
    "\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159#\u0003",
    "\u0002\u0002\u0002\u015a\u0158\u0003\u0002\u0002\u0002\u015b\u01e8\u0007",
    "\u0003\u0002\u0002\u015c\u01e8\u0007\u0004\u0002\u0002\u015d\u015e\u0007",
    "\n\u0002\u0002\u015e\u01e8\u0007\u0003\u0002\u0002\u015f\u0160\u0007",
    "\n\u0002\u0002\u0160\u01e8\u0007\u0004\u0002\u0002\u0161\u0162\u0007",
    "\u000b\u0002\u0002\u0162\u01e8\u0007\u0003\u0002\u0002\u0163\u0164\u0007",
    "\u000b\u0002\u0002\u0164\u01e8\u0007\u0004\u0002\u0002\u0165\u01e8\u0007",
    "\u001c\u0002\u0002\u0166\u01e8\u0007\u001d\u0002\u0002\u0167\u01e8\u0007",
    "*\u0002\u0002\u0168\u01e8\u0007+\u0002\u0002\u0169\u01e8\u0007,\u0002",
    "\u0002\u016a\u01e8\u0007-\u0002\u0002\u016b\u01e8\u0007\n\u0002\u0002",
    "\u016c\u01e8\u0007\u000b\u0002\u0002\u016d\u01e8\u0007\f\u0002\u0002",
    "\u016e\u01e8\u0007\r\u0002\u0002\u016f\u01e8\u0007\u000e\u0002\u0002",
    "\u0170\u01e8\u0007\u000f\u0002\u0002\u0171\u01e8\u0007\u0011\u0002\u0002",
    "\u0172\u01e8\u0007\u0012\u0002\u0002\u0173\u01e8\u0007\u0013\u0002\u0002",
    "\u0174\u01e8\u0007\u0014\u0002\u0002\u0175\u01e8\u0007\u0015\u0002\u0002",
    "\u0176\u01e8\u0007\u0016\u0002\u0002\u0177\u01e8\u0007\u0017\u0002\u0002",
    "\u0178\u01e8\u0007\u0018\u0002\u0002\u0179\u01e8\u0007\u0019\u0002\u0002",
    "\u017a\u01e8\u0007\u001a\u0002\u0002\u017b\u01e8\u0007\u001b\u0002\u0002",
    "\u017c\u01e8\u0007@\u0002\u0002\u017d\u01e8\u0007b\u0002\u0002\u017e",
    "\u01e8\u0007c\u0002\u0002\u017f\u01e8\u0007A\u0002\u0002\u0180\u01e8",
    "\u0007B\u0002\u0002\u0181\u01e8\u0007C\u0002\u0002\u0182\u01e8\u0007",
    "D\u0002\u0002\u0183\u01e8\u0007E\u0002\u0002\u0184\u01e8\u0007F\u0002",
    "\u0002\u0185\u01e8\u0007G\u0002\u0002\u0186\u01e8\u0007H\u0002\u0002",
    "\u0187\u01e8\u0007I\u0002\u0002\u0188\u01e8\u0007J\u0002\u0002\u0189",
    "\u01e8\u0007K\u0002\u0002\u018a\u01e8\u0007L\u0002\u0002\u018b\u01e8",
    "\u0007M\u0002\u0002\u018c\u01e8\u0007N\u0002\u0002\u018d\u01e8\u0007",
    "O\u0002\u0002\u018e\u01e8\u0007P\u0002\u0002\u018f\u01e8\u0007Q\u0002",
    "\u0002\u0190\u01e8\u0007R\u0002\u0002\u0191\u01e8\u0007S\u0002\u0002",
    "\u0192\u01e8\u0007T\u0002\u0002\u0193\u01e8\u0007U\u0002\u0002\u0194",
    "\u01e8\u0007.\u0002\u0002\u0195\u01e8\u0007/\u0002\u0002\u0196\u01e8",
    "\u00070\u0002\u0002\u0197\u01e8\u00071\u0002\u0002\u0198\u01e8\u0005",
    "P)\u0002\u0199\u019a\u0007\u000b\u0002\u0002\u019a\u01e8\u0005P)\u0002",
    "\u019b\u019c\u0007 \u0002\u0002\u019c\u019d\u0005 \u0011\u0002\u019d",
    "\u019e\u0007!\u0002\u0002\u019e\u01e8\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0007&\u0002\u0002\u01a0\u01a1\u0007 \u0002\u0002\u01a1\u01a2",
    "\u0005\u001c\u000f\u0002\u01a2\u01a3\u0007!\u0002\u0002\u01a3\u01a4",
    "\u0007\'\u0002\u0002\u01a4\u01a5\u0007 \u0002\u0002\u01a5\u01a6\u0005",
    " \u0011\u0002\u01a6\u01a7\u0007!\u0002\u0002\u01a7\u01e8\u0003\u0002",
    "\u0002\u0002\u01a8\u01a9\u0007e\u0002\u0002\u01a9\u01ab\u0007\"\u0002",
    "\u0002\u01aa\u01ac\u0005N(\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002",
    "\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002",
    "\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002",
    "\u01af\u01b0\u0007#\u0002\u0002\u01b0\u01e8\u0003\u0002\u0002\u0002",
    "\u01b1\u01e8\u0005&\u0014\u0002\u01b2\u01e8\u0005(\u0015\u0002\u01b3",
    "\u01e8\u0005*\u0016\u0002\u01b4\u01b5\u0007]\u0002\u0002\u01b5\u01b6",
    "\u0007 \u0002\u0002\u01b6\u01b7\u0005R*\u0002\u01b7\u01b8\u0007!\u0002",
    "\u0002\u01b8\u01e8\u0003\u0002\u0002\u0002\u01b9\u01ba\u0007^\u0002",
    "\u0002\u01ba\u01bb\u0007 \u0002\u0002\u01bb\u01bc\u0005R*\u0002\u01bc",
    "\u01bd\u0007!\u0002\u0002\u01bd\u01e8\u0003\u0002\u0002\u0002\u01be",
    "\u01bf\u0007_\u0002\u0002\u01bf\u01c4\u0007\"\u0002\u0002\u01c0\u01c3",
    "\u0005\n\u0006\u0002\u01c1\u01c3\u0005\u0002\u0002\u0002\u01c2\u01c0",
    "\u0003\u0002\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c3\u01c6",
    "\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002\u01c4\u01c5",
    "\u0003\u0002\u0002\u0002\u01c5\u01c7\u0003\u0002\u0002\u0002\u01c6\u01c4",
    "\u0003\u0002\u0002\u0002\u01c7\u01e8\u0007#\u0002\u0002\u01c8\u01c9",
    "\u0007`\u0002\u0002\u01c9\u01ca\u0007\"\u0002\u0002\u01ca\u01cb\u0005",
    "V,\u0002\u01cb\u01cc\u0007#\u0002\u0002\u01cc\u01e8\u0003\u0002\u0002",
    "\u0002\u01cd\u01ce\u0007a\u0002\u0002\u01ce\u01cf\u0007 \u0002\u0002",
    "\u01cf\u01d0\u0005\u001a\u000e\u0002\u01d0\u01d1\u0007\u0006\u0002\u0002",
    "\u01d1\u01d2\u0005\u001a\u000e\u0002\u01d2\u01d3\u0007\u0006\u0002\u0002",
    "\u01d3\u01d4\u0005 \u0011\u0002\u01d4\u01d5\u0007!\u0002\u0002\u01d5",
    "\u01e8\u0003\u0002\u0002\u0002\u01d6\u01e8\u0005,\u0017\u0002\u01d7",
    "\u01e8\u0005.\u0018\u0002\u01d8\u01e8\u00050\u0019\u0002\u01d9\u01e8",
    "\u00052\u001a\u0002\u01da\u01e8\u00054\u001b\u0002\u01db\u01e8\u0005",
    "6\u001c\u0002\u01dc\u01e8\u00058\u001d\u0002\u01dd\u01e8\u0005:\u001e",
    "\u0002\u01de\u01e8\u0005<\u001f\u0002\u01df\u01e8\u0005> \u0002\u01e0",
    "\u01e8\u0005@!\u0002\u01e1\u01e8\u0005B\"\u0002\u01e2\u01e8\u0005D#",
    "\u0002\u01e3\u01e8\u0005F$\u0002\u01e4\u01e8\u0005H%\u0002\u01e5\u01e8",
    "\u0005J&\u0002\u01e6\u01e8\u0005L\'\u0002\u01e7\u015b\u0003\u0002\u0002",
    "\u0002\u01e7\u015c\u0003\u0002\u0002\u0002\u01e7\u015d\u0003\u0002\u0002",
    "\u0002\u01e7\u015f\u0003\u0002\u0002\u0002\u01e7\u0161\u0003\u0002\u0002",
    "\u0002\u01e7\u0163\u0003\u0002\u0002\u0002\u01e7\u0165\u0003\u0002\u0002",
    "\u0002\u01e7\u0166\u0003\u0002\u0002\u0002\u01e7\u0167\u0003\u0002\u0002",
    "\u0002\u01e7\u0168\u0003\u0002\u0002\u0002\u01e7\u0169\u0003\u0002\u0002",
    "\u0002\u01e7\u016a\u0003\u0002\u0002\u0002\u01e7\u016b\u0003\u0002\u0002",
    "\u0002\u01e7\u016c\u0003\u0002\u0002\u0002\u01e7\u016d\u0003\u0002\u0002",
    "\u0002\u01e7\u016e\u0003\u0002\u0002\u0002\u01e7\u016f\u0003\u0002\u0002",
    "\u0002\u01e7\u0170\u0003\u0002\u0002\u0002\u01e7\u0171\u0003\u0002\u0002",
    "\u0002\u01e7\u0172\u0003\u0002\u0002\u0002\u01e7\u0173\u0003\u0002\u0002",
    "\u0002\u01e7\u0174\u0003\u0002\u0002\u0002\u01e7\u0175\u0003\u0002\u0002",
    "\u0002\u01e7\u0176\u0003\u0002\u0002\u0002\u01e7\u0177\u0003\u0002\u0002",
    "\u0002\u01e7\u0178\u0003\u0002\u0002\u0002\u01e7\u0179\u0003\u0002\u0002",
    "\u0002\u01e7\u017a\u0003\u0002\u0002\u0002\u01e7\u017b\u0003\u0002\u0002",
    "\u0002\u01e7\u017c\u0003\u0002\u0002\u0002\u01e7\u017d\u0003\u0002\u0002",
    "\u0002\u01e7\u017e\u0003\u0002\u0002\u0002\u01e7\u017f\u0003\u0002\u0002",
    "\u0002\u01e7\u0180\u0003\u0002\u0002\u0002\u01e7\u0181\u0003\u0002\u0002",
    "\u0002\u01e7\u0182\u0003\u0002\u0002\u0002\u01e7\u0183\u0003\u0002\u0002",
    "\u0002\u01e7\u0184\u0003\u0002\u0002\u0002\u01e7\u0185\u0003\u0002\u0002",
    "\u0002\u01e7\u0186\u0003\u0002\u0002\u0002\u01e7\u0187\u0003\u0002\u0002",
    "\u0002\u01e7\u0188\u0003\u0002\u0002\u0002\u01e7\u0189\u0003\u0002\u0002",
    "\u0002\u01e7\u018a\u0003\u0002\u0002\u0002\u01e7\u018b\u0003\u0002\u0002",
    "\u0002\u01e7\u018c\u0003\u0002\u0002\u0002\u01e7\u018d\u0003\u0002\u0002",
    "\u0002\u01e7\u018e\u0003\u0002\u0002\u0002\u01e7\u018f\u0003\u0002\u0002",
    "\u0002\u01e7\u0190\u0003\u0002\u0002\u0002\u01e7\u0191\u0003\u0002\u0002",
    "\u0002\u01e7\u0192\u0003\u0002\u0002\u0002\u01e7\u0193\u0003\u0002\u0002",
    "\u0002\u01e7\u0194\u0003\u0002\u0002\u0002\u01e7\u0195\u0003\u0002\u0002",
    "\u0002\u01e7\u0196\u0003\u0002\u0002\u0002\u01e7\u0197\u0003\u0002\u0002",
    "\u0002\u01e7\u0198\u0003\u0002\u0002\u0002\u01e7\u0199\u0003\u0002\u0002",
    "\u0002\u01e7\u019b\u0003\u0002\u0002\u0002\u01e7\u019f\u0003\u0002\u0002",
    "\u0002\u01e7\u01a8\u0003\u0002\u0002\u0002\u01e7\u01b1\u0003\u0002\u0002",
    "\u0002\u01e7\u01b2\u0003\u0002\u0002\u0002\u01e7\u01b3\u0003\u0002\u0002",
    "\u0002\u01e7\u01b4\u0003\u0002\u0002\u0002\u01e7\u01b9\u0003\u0002\u0002",
    "\u0002\u01e7\u01be\u0003\u0002\u0002\u0002\u01e7\u01c8\u0003\u0002\u0002",
    "\u0002\u01e7\u01cd\u0003\u0002\u0002\u0002\u01e7\u01d6\u0003\u0002\u0002",
    "\u0002\u01e7\u01d7\u0003\u0002\u0002\u0002\u01e7\u01d8\u0003\u0002\u0002",
    "\u0002\u01e7\u01d9\u0003\u0002\u0002\u0002\u01e7\u01da\u0003\u0002\u0002",
    "\u0002\u01e7\u01db\u0003\u0002\u0002\u0002\u01e7\u01dc\u0003\u0002\u0002",
    "\u0002\u01e7\u01dd\u0003\u0002\u0002\u0002\u01e7\u01de\u0003\u0002\u0002",
    "\u0002\u01e7\u01df\u0003\u0002\u0002\u0002\u01e7\u01e0\u0003\u0002\u0002",
    "\u0002\u01e7\u01e1\u0003\u0002\u0002\u0002\u01e7\u01e2\u0003\u0002\u0002",
    "\u0002\u01e7\u01e3\u0003\u0002\u0002\u0002\u01e7\u01e4\u0003\u0002\u0002",
    "\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e7\u01e6\u0003\u0002\u0002",
    "\u0002\u01e8%\u0003\u0002\u0002\u0002\u01e9\u01ea\u00072\u0002\u0002",
    "\u01ea\u01eb\u0007 \u0002\u0002\u01eb\u01ec\u0005`1\u0002\u01ec\u01ed",
    "\u0007\u0006\u0002\u0002\u01ed\u01ee\u0005T+\u0002\u01ee\u01ef\u0007",
    "\u0006\u0002\u0002\u01ef\u01f0\u0005Z.\u0002\u01f0\u01f1\u0007!\u0002",
    "\u0002\u01f1\'\u0003\u0002\u0002\u0002\u01f2\u01f3\u00073\u0002\u0002",
    "\u01f3\u01f4\u0007 \u0002\u0002\u01f4\u01f5\u0005^0\u0002\u01f5\u01f6",
    "\u0005\\/\u0002\u01f6\u01f7\u0007\u0006\u0002\u0002\u01f7\u01f8\u0005",
    "T+\u0002\u01f8\u01f9\u0007!\u0002\u0002\u01f9)\u0003\u0002\u0002\u0002",
    "\u01fa\u01fb\u00074\u0002\u0002\u01fb\u01fc\u0007 \u0002\u0002\u01fc",
    "\u01fd\u0005^0\u0002\u01fd\u01fe\u0005\\/\u0002\u01fe\u01ff\u0007\u0006",
    "\u0002\u0002\u01ff\u0200\u0005T+\u0002\u0200\u0201\u0007!\u0002\u0002",
    "\u0201+\u0003\u0002\u0002\u0002\u0202\u0203\u00075\u0002\u0002\u0203",
    "\u0204\u0007 \u0002\u0002\u0204\u0205\u0005R*\u0002\u0205\u0206\u0007",
    "!\u0002\u0002\u0206-\u0003\u0002\u0002\u0002\u0207\u0208\u00076\u0002",
    "\u0002\u0208\u0209\u0007 \u0002\u0002\u0209\u020a\u0005R*\u0002\u020a",
    "\u020b\u0007!\u0002\u0002\u020b/\u0003\u0002\u0002\u0002\u020c\u020d",
    "\u00077\u0002\u0002\u020d\u020e\u0007 \u0002\u0002\u020e\u020f\u0005",
    "R*\u0002\u020f\u0210\u0007\u0006\u0002\u0002\u0210\u0211\u0005\u001a",
    "\u000e\u0002\u0211\u0212\u0007\u0006\u0002\u0002\u0212\u0213\u0005\u001a",
    "\u000e\u0002\u0213\u0214\u0007\u0006\u0002\u0002\u0214\u0215\u0005\u001a",
    "\u000e\u0002\u0215\u0216\u0007\u0006\u0002\u0002\u0216\u0217\u0005\u001a",
    "\u000e\u0002\u0217\u0218\u0007!\u0002\u0002\u02181\u0003\u0002\u0002",
    "\u0002\u0219\u021a\u00078\u0002\u0002\u021a\u021b\u0007 \u0002\u0002",
    "\u021b\u021c\u0005R*\u0002\u021c\u021d\u0007\u0006\u0002\u0002\u021d",
    "\u021e\u0005\u001a\u000e\u0002\u021e\u021f\u0007\u0006\u0002\u0002\u021f",
    "\u0220\u0005\u001a\u000e\u0002\u0220\u0221\u0007\u0006\u0002\u0002\u0221",
    "\u0222\u0005\u001a\u000e\u0002\u0222\u0223\u0007\u0006\u0002\u0002\u0223",
    "\u0224\u0005\u001a\u000e\u0002\u0224\u0225\u0007!\u0002\u0002\u0225",
    "3\u0003\u0002\u0002\u0002\u0226\u0227\u00079\u0002\u0002\u0227\u0228",
    "\u0007 \u0002\u0002\u0228\u0229\u0005R*\u0002\u0229\u022a\u0007\u0006",
    "\u0002\u0002\u022a\u022b\u0005\u001a\u000e\u0002\u022b\u022c\u0007\u0006",
    "\u0002\u0002\u022c\u022d\u0005\u001a\u000e\u0002\u022d\u022e\u0007\u0006",
    "\u0002\u0002\u022e\u022f\u0005\u001a\u000e\u0002\u022f\u0230\u0007\u0006",
    "\u0002\u0002\u0230\u0231\u0005\u001a\u000e\u0002\u0231\u0232\u0007!",
    "\u0002\u0002\u02325\u0003\u0002\u0002\u0002\u0233\u0234\u0007:\u0002",
    "\u0002\u0234\u0235\u0007 \u0002\u0002\u0235\u0236\u0005R*\u0002\u0236",
    "\u0237\u0007\u0006\u0002\u0002\u0237\u0238\u0005 \u0011\u0002\u0238",
    "\u0239\u0007!\u0002\u0002\u02397\u0003\u0002\u0002\u0002\u023a\u023b",
    "\u0007;\u0002\u0002\u023b\u023c\u0007 \u0002\u0002\u023c\u023d\u0005",
    "R*\u0002\u023d\u023e\u0007\u0006\u0002\u0002\u023e\u023f\u0005 \u0011",
    "\u0002\u023f\u0240\u0007!\u0002\u0002\u02409\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0007<\u0002\u0002\u0242\u0243\u0007 \u0002\u0002\u0243",
    "\u0244\u0005R*\u0002\u0244\u0245\u0007\u0006\u0002\u0002\u0245\u0246",
    "\u0005 \u0011\u0002\u0246\u0247\u0007!\u0002\u0002\u0247;\u0003\u0002",
    "\u0002\u0002\u0248\u0249\u0007=\u0002\u0002\u0249\u024a\u0007 \u0002",
    "\u0002\u024a\u024b\u0005R*\u0002\u024b\u024c\u0007\u0006\u0002\u0002",
    "\u024c\u024d\u0005\u001a\u000e\u0002\u024d\u024e\u0007\u0006\u0002\u0002",
    "\u024e\u024f\u0005\u001a\u000e\u0002\u024f\u0250\u0007!\u0002\u0002",
    "\u0250=\u0003\u0002\u0002\u0002\u0251\u0252\u0007>\u0002\u0002\u0252",
    "\u0253\u0007 \u0002\u0002\u0253\u0254\u0005R*\u0002\u0254\u0255\u0007",
    "\u0006\u0002\u0002\u0255\u0256\u0005\u001a\u000e\u0002\u0256\u0257\u0007",
    "\u0006\u0002\u0002\u0257\u0258\u0005\u001a\u000e\u0002\u0258\u0259\u0007",
    "!\u0002\u0002\u0259?\u0003\u0002\u0002\u0002\u025a\u025b\u0007?\u0002",
    "\u0002\u025b\u025c\u0007 \u0002\u0002\u025c\u025d\u0005R*\u0002\u025d",
    "\u025e\u0007\u0006\u0002\u0002\u025e\u025f\u0005\u001a\u000e\u0002\u025f",
    "\u0260\u0007!\u0002\u0002\u0260A\u0003\u0002\u0002\u0002\u0261\u0262",
    "\u0007W\u0002\u0002\u0262\u0263\u0007 \u0002\u0002\u0263\u0264\u0005",
    "P)\u0002\u0264\u0265\u0007\u0006\u0002\u0002\u0265\u0266\u0005\u001a",
    "\u000e\u0002\u0266\u0267\u0007\u0006\u0002\u0002\u0267\u0268\u0005 ",
    "\u0011\u0002\u0268\u0269\u0007!\u0002\u0002\u0269C\u0003\u0002\u0002",
    "\u0002\u026a\u026b\u0007V\u0002\u0002\u026b\u026c\u0007 \u0002\u0002",
    "\u026c\u026d\u0005P)\u0002\u026d\u026e\u0007\u0006\u0002\u0002\u026e",
    "\u026f\u0005\u001a\u000e\u0002\u026f\u0270\u0007\u0006\u0002\u0002\u0270",
    "\u0271\u0005 \u0011\u0002\u0271\u0272\u0007!\u0002\u0002\u0272E\u0003",
    "\u0002\u0002\u0002\u0273\u0274\u0007X\u0002\u0002\u0274\u0275\u0007",
    " \u0002\u0002\u0275\u0276\u0005P)\u0002\u0276\u0277\u0007\u0006\u0002",
    "\u0002\u0277\u0278\u0005\u001a\u000e\u0002\u0278\u0279\u0007\u0006\u0002",
    "\u0002\u0279\u027a\u0005 \u0011\u0002\u027a\u027b\u0007!\u0002\u0002",
    "\u027bG\u0003\u0002\u0002\u0002\u027c\u027d\u0007Y\u0002\u0002\u027d",
    "\u027e\u0007 \u0002\u0002\u027e\u027f\u0005P)\u0002\u027f\u0280\u0007",
    "\u0006\u0002\u0002\u0280\u0281\u0005\u001a\u000e\u0002\u0281\u0282\u0007",
    "\u0006\u0002\u0002\u0282\u0283\u0005 \u0011\u0002\u0283\u0284\u0007",
    "!\u0002\u0002\u0284I\u0003\u0002\u0002\u0002\u0285\u0286\u0007Z\u0002",
    "\u0002\u0286\u0287\u0007 \u0002\u0002\u0287\u0288\u0005 \u0011\u0002",
    "\u0288\u0289\u0007!\u0002\u0002\u0289K\u0003\u0002\u0002\u0002\u028a",
    "\u028b\u0007[\u0002\u0002\u028b\u028c\u0007 \u0002\u0002\u028c\u028d",
    "\u0005 \u0011\u0002\u028d\u028e\u0007!\u0002\u0002\u028eM\u0003\u0002",
    "\u0002\u0002\u028f\u0290\u0007 \u0002\u0002\u0290\u0291\u0005\u0010",
    "\t\u0002\u0291\u0292\u0007!\u0002\u0002\u0292\u0293\u0007f\u0002\u0002",
    "\u0293\u0294\u0005 \u0011\u0002\u0294\u0295\u0007\u001e\u0002\u0002",
    "\u0295O\u0003\u0002\u0002\u0002\u0296\u0297\u0007k\u0002\u0002\u0297",
    "Q\u0003\u0002\u0002\u0002\u0298\u0299\u0007l\u0002\u0002\u0299S\u0003",
    "\u0002\u0002\u0002\u029a\u029b\t\u0003\u0002\u0002\u029bU\u0003\u0002",
    "\u0002\u0002\u029c\u029d\b,\u0001\u0002\u029d\u029e\u0005X-\u0002\u029e",
    "\u02a4\u0003\u0002\u0002\u0002\u029f\u02a0\f\u0003\u0002\u0002\u02a0",
    "\u02a1\u0007\u0006\u0002\u0002\u02a1\u02a3\u0005X-\u0002\u02a2\u029f",
    "\u0003\u0002\u0002\u0002\u02a3\u02a6\u0003\u0002\u0002\u0002\u02a4\u02a2",
    "\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5W",
    "\u0003\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a7\u02b2",
    "\u0007\u0003\u0002\u0002\u02a8\u02b2\u0007\u0004\u0002\u0002\u02a9\u02aa",
    "\u0007\n\u0002\u0002\u02aa\u02b2\u0007\u0003\u0002\u0002\u02ab\u02ac",
    "\u0007\n\u0002\u0002\u02ac\u02b2\u0007\u0004\u0002\u0002\u02ad\u02ae",
    "\u0007\u000b\u0002\u0002\u02ae\u02b2\u0007\u0003\u0002\u0002\u02af\u02b0",
    "\u0007\u000b\u0002\u0002\u02b0\u02b2\u0007\u0004\u0002\u0002\u02b1\u02a7",
    "\u0003\u0002\u0002\u0002\u02b1\u02a8\u0003\u0002\u0002\u0002\u02b1\u02a9",
    "\u0003\u0002\u0002\u0002\u02b1\u02ab\u0003\u0002\u0002\u0002\u02b1\u02ad",
    "\u0003\u0002\u0002\u0002\u02b1\u02af\u0003\u0002\u0002\u0002\u02b2Y",
    "\u0003\u0002\u0002\u0002\u02b3\u02b4\u0007l\u0002\u0002\u02b4[\u0003",
    "\u0002\u0002\u0002\u02b5\u02b6\u0007k\u0002\u0002\u02b6]\u0003\u0002",
    "\u0002\u0002\u02b7\u02b8\t\u0004\u0002\u0002\u02b8_\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0005^0\u0002\u02ba\u02bb\u0005b2\u0002\u02bb\u02bc",
    "\u0007 \u0002\u0002\u02bc\u02bd\u0005d3\u0002\u02bd\u02be\u0007!\u0002",
    "\u0002\u02be\u02c5\u0003\u0002\u0002\u0002\u02bf\u02c0\u0005^0\u0002",
    "\u02c0\u02c1\u0005b2\u0002\u02c1\u02c2\u0007 \u0002\u0002\u02c2\u02c3",
    "\u0007!\u0002\u0002\u02c3\u02c5\u0003\u0002\u0002\u0002\u02c4\u02b9",
    "\u0003\u0002\u0002\u0002\u02c4\u02bf\u0003\u0002\u0002\u0002\u02c5a",
    "\u0003\u0002\u0002\u0002\u02c6\u02d0\u0007k\u0002\u0002\u02c7\u02c8",
    "\u0007k\u0002\u0002\u02c8\u02c9\u0007\u0012\u0002\u0002\u02c9\u02d0",
    "\u0007k\u0002\u0002\u02ca\u02cb\u0007k\u0002\u0002\u02cb\u02cc\u0007",
    "\u0012\u0002\u0002\u02cc\u02cd\u0007k\u0002\u0002\u02cd\u02ce\u0007",
    "\u0012\u0002\u0002\u02ce\u02d0\u0007k\u0002\u0002\u02cf\u02c6\u0003",
    "\u0002\u0002\u0002\u02cf\u02c7\u0003\u0002\u0002\u0002\u02cf\u02ca\u0003",
    "\u0002\u0002\u0002\u02d0c\u0003\u0002\u0002\u0002\u02d1\u02d2\b3\u0001",
    "\u0002\u02d2\u02d3\u0005^0\u0002\u02d3\u02d9\u0003\u0002\u0002\u0002",
    "\u02d4\u02d5\f\u0003\u0002\u0002\u02d5\u02d6\u0007\u0006\u0002\u0002",
    "\u02d6\u02d8\u0005^0\u0002\u02d7\u02d4\u0003\u0002\u0002\u0002\u02d8",
    "\u02db\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02d9",
    "\u02da\u0003\u0002\u0002\u0002\u02dae\u0003\u0002\u0002\u0002\u02db",
    "\u02d9\u0003\u0002\u0002\u0002\u001fioqz\u008f\u009e\u00aa\u00b0\u00bf",
    "\u00c3\u00d1\u00d3\u00de\u00e5\u00e7\u0105\u0107\u014d\u0156\u0158\u01ad",
    "\u01c2\u01c4\u01e7\u02a4\u02b1\u02c4\u02cf\u02d9"].join("");
const atn = new antlr4_1.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4_1.default.dfa.DFA(ds, index));
const sharedContextCache = new antlr4_1.default.PredictionContextCache();
class FaustParser extends antlr4_1.default.Parser {
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = FaustParser.ruleNames;
        this.literalNames = FaustParser.literalNames;
        this.symbolicNames = FaustParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    sempred(localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 7:
                return this.arglist_sempred(localctx, predIndex);
            case 12:
                return this.argument_sempred(localctx, predIndex);
            case 13:
                return this.params_sempred(localctx, predIndex);
            case 15:
                return this.expression_sempred(localctx, predIndex);
            case 16:
                return this.infixexpr_sempred(localctx, predIndex);
            case 42:
                return this.vallist_sempred(localctx, predIndex);
            case 49:
                return this.typelist_sempred(localctx, predIndex);
            default:
                throw "No predicate with index:" + ruleIndex;
        }
    }
    arglist_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    argument_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return this.precpred(this._ctx, 4);
            case 2:
                return this.precpred(this._ctx, 3);
            case 3:
                return this.precpred(this._ctx, 2);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    params_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 4:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    expression_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 5:
                return this.precpred(this._ctx, 5);
            case 6:
                return this.precpred(this._ctx, 4);
            case 7:
                return this.precpred(this._ctx, 3);
            case 8:
                return this.precpred(this._ctx, 2);
            case 9:
                return this.precpred(this._ctx, 6);
            case 10:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    infixexpr_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 11:
                return this.precpred(this._ctx, 20);
            case 12:
                return this.precpred(this._ctx, 17);
            case 13:
                return this.precpred(this._ctx, 16);
            case 14:
                return this.precpred(this._ctx, 15);
            case 15:
                return this.precpred(this._ctx, 14);
            case 16:
                return this.precpred(this._ctx, 13);
            case 17:
                return this.precpred(this._ctx, 12);
            case 18:
                return this.precpred(this._ctx, 11);
            case 19:
                return this.precpred(this._ctx, 10);
            case 20:
                return this.precpred(this._ctx, 9);
            case 21:
                return this.precpred(this._ctx, 8);
            case 22:
                return this.precpred(this._ctx, 7);
            case 23:
                return this.precpred(this._ctx, 6);
            case 24:
                return this.precpred(this._ctx, 5);
            case 25:
                return this.precpred(this._ctx, 4);
            case 26:
                return this.precpred(this._ctx, 3);
            case 27:
                return this.precpred(this._ctx, 2);
            case 28:
                return this.precpred(this._ctx, 1);
            case 29:
                return this.precpred(this._ctx, 22);
            case 30:
                return this.precpred(this._ctx, 21);
            case 31:
                return this.precpred(this._ctx, 19);
            case 32:
                return this.precpred(this._ctx, 18);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    vallist_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 33:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    typelist_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 34:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    variantstatement() {
        let localctx = new VariantstatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, FaustParser.RULE_variantstatement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 101;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 100;
                this.variant();
                this.state = 103;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FaustParser.FLOATMODE - 101)) | (1 << (FaustParser.DOUBLEMODE - 101)) | (1 << (FaustParser.QUADMODE - 101)) | (1 << (FaustParser.FIXEDPOINTMODE - 101)))) !== 0));
            this.state = 105;
            localctx.variantStatement = this.statement();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    program() {
        let localctx = new ProgramContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, FaustParser.RULE_program);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (FaustParser.IMPORT - 90)) | (1 << (FaustParser.DECLARE - 90)) | (1 << (FaustParser.FLOATMODE - 90)) | (1 << (FaustParser.DOUBLEMODE - 90)) | (1 << (FaustParser.QUADMODE - 90)) | (1 << (FaustParser.FIXEDPOINTMODE - 90)) | (1 << (FaustParser.IDENT - 90)))) !== 0)) {
                this.state = 109;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case FaustParser.IMPORT:
                    case FaustParser.DECLARE:
                    case FaustParser.IDENT:
                        this.state = 107;
                        this.statement();
                        break;
                    case FaustParser.FLOATMODE:
                    case FaustParser.DOUBLEMODE:
                    case FaustParser.QUADMODE:
                    case FaustParser.FIXEDPOINTMODE:
                        this.state = 108;
                        this.variantstatement();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 113;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 114;
            this.match(FaustParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variant() {
        let localctx = new VariantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, FaustParser.RULE_variant);
        try {
            this.state = 120;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FaustParser.FLOATMODE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 116;
                    localctx.precision = this.match(FaustParser.FLOATMODE);
                    break;
                case FaustParser.DOUBLEMODE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 117;
                    localctx.precision = this.match(FaustParser.DOUBLEMODE);
                    break;
                case FaustParser.QUADMODE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 118;
                    localctx.precision = this.match(FaustParser.QUADMODE);
                    break;
                case FaustParser.FIXEDPOINTMODE:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 119;
                    localctx.precision = this.match(FaustParser.FIXEDPOINTMODE);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importStatement() {
        let localctx = new ImportStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, FaustParser.RULE_importStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 122;
            this.match(FaustParser.IMPORT);
            this.state = 123;
            this.match(FaustParser.LPAR);
            this.state = 124;
            localctx.importName = this.uqstring();
            this.state = 125;
            this.match(FaustParser.RPAR);
            this.state = 126;
            this.match(FaustParser.ENDDEF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statement() {
        let localctx = new StatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, FaustParser.RULE_statement);
        try {
            this.state = 141;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 128;
                    localctx.imp = this.importStatement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 129;
                    this.match(FaustParser.DECLARE);
                    this.state = 130;
                    localctx.decname = this.name();
                    this.state = 131;
                    localctx.decval = this.string();
                    this.state = 132;
                    this.match(FaustParser.ENDDEF);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 134;
                    this.match(FaustParser.DECLARE);
                    this.state = 135;
                    localctx.decarg = this.name();
                    this.state = 136;
                    localctx.decname = this.name();
                    this.state = 137;
                    localctx.decval = this.string();
                    this.state = 138;
                    this.match(FaustParser.ENDDEF);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 140;
                    localctx.def = this.definition();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definition() {
        let localctx = new DefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, FaustParser.RULE_definition);
        try {
            this.state = 156;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 5, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 143;
                    localctx.identname = this.defname();
                    this.state = 144;
                    this.match(FaustParser.LPAR);
                    this.state = 145;
                    localctx.args = this.arglist(0);
                    this.state = 146;
                    this.match(FaustParser.RPAR);
                    this.state = 147;
                    this.match(FaustParser.DEF);
                    this.state = 148;
                    localctx.expr = this.expression(0);
                    this.state = 149;
                    this.match(FaustParser.ENDDEF);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 151;
                    localctx.identname = this.defname();
                    this.state = 152;
                    this.match(FaustParser.DEF);
                    this.state = 153;
                    localctx.expr = this.expression(0);
                    this.state = 154;
                    this.match(FaustParser.ENDDEF);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    defname() {
        let localctx = new DefnameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, FaustParser.RULE_defname);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 158;
            this.ident();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arglist(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new ArglistContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 14;
        this.enterRecursionRule(localctx, 14, FaustParser.RULE_arglist, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 161;
            localctx.arg = this.argument(0);
            this._ctx.stop = this._input.LT(-1);
            this.state = 168;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new ArglistContext(this, _parentctx, _parentState);
                    localctx.list = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_arglist);
                    this.state = 163;
                    if (!(this.precpred(this._ctx, 1))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 164;
                    localctx.op = this.match(FaustParser.PAR);
                    this.state = 165;
                    localctx.arg = this.argument(0);
                }
                this.state = 170;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    reclist() {
        let localctx = new ReclistContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, FaustParser.RULE_reclist);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === FaustParser.DELAY1) {
                this.state = 171;
                this.recinition();
                this.state = 176;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    recinition() {
        let localctx = new RecinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, FaustParser.RULE_recinition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 177;
            localctx.identname = this.recname();
            this.state = 178;
            this.match(FaustParser.DEF);
            this.state = 179;
            localctx.expr = this.expression(0);
            this.state = 180;
            this.match(FaustParser.ENDDEF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    recname() {
        let localctx = new RecnameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, FaustParser.RULE_recname);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 182;
            this.match(FaustParser.DELAY1);
            this.state = 183;
            localctx.identname = this.ident();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    deflist() {
        let localctx = new DeflistContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, FaustParser.RULE_deflist);
        var _la = 0; // Token type
        try {
            this.state = 193;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FaustParser.IDENT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 185;
                    localctx.def = this.definition();
                    break;
                case FaustParser.FLOATMODE:
                case FaustParser.DOUBLEMODE:
                case FaustParser.QUADMODE:
                case FaustParser.FIXEDPOINTMODE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 187;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 186;
                        this.variant();
                        this.state = 189;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FaustParser.FLOATMODE - 101)) | (1 << (FaustParser.DOUBLEMODE - 101)) | (1 << (FaustParser.QUADMODE - 101)) | (1 << (FaustParser.FIXEDPOINTMODE - 101)))) !== 0));
                    this.state = 191;
                    localctx.def = this.definition();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    argument(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new ArgumentContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 24;
        this.enterRecursionRule(localctx, 24, FaustParser.RULE_argument, _p);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 196;
            localctx.expr = this.infixexpr(0);
            this._ctx.stop = this._input.LT(-1);
            this.state = 209;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    this.state = 207;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
                    switch (la_) {
                        case 1:
                            localctx = new ArgumentContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_argument);
                            this.state = 198;
                            if (!(this.precpred(this._ctx, 4))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                            }
                            this.state = 199;
                            localctx.op = this.match(FaustParser.SEQ);
                            this.state = 200;
                            localctx.right = this.argument(4);
                            break;
                        case 2:
                            localctx = new ArgumentContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_argument);
                            this.state = 201;
                            if (!(this.precpred(this._ctx, 3))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                            }
                            this.state = 202;
                            localctx.op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === FaustParser.SPLIT || _la === FaustParser.MIX)) {
                                localctx.op = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 203;
                            localctx.right = this.argument(3);
                            break;
                        case 3:
                            localctx = new ArgumentContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_argument);
                            this.state = 204;
                            if (!(this.precpred(this._ctx, 2))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                            }
                            this.state = 205;
                            localctx.op = this.match(FaustParser.REC);
                            this.state = 206;
                            localctx.right = this.argument(3);
                            break;
                    }
                }
                this.state = 211;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    params(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new ParamsContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 26;
        this.enterRecursionRule(localctx, 26, FaustParser.RULE_params, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 213;
            localctx.id = this.ident();
            this._ctx.stop = this._input.LT(-1);
            this.state = 220;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new ParamsContext(this, _parentctx, _parentState);
                    localctx.pars = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_params);
                    this.state = 215;
                    if (!(this.precpred(this._ctx, 1))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 216;
                    this.match(FaustParser.PAR);
                    this.state = 217;
                    localctx.id = this.ident();
                }
                this.state = 222;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    withdef() {
        let localctx = new WithdefContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, FaustParser.RULE_withdef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FaustParser.FLOATMODE - 101)) | (1 << (FaustParser.DOUBLEMODE - 101)) | (1 << (FaustParser.QUADMODE - 101)) | (1 << (FaustParser.FIXEDPOINTMODE - 101)) | (1 << (FaustParser.IDENT - 101)))) !== 0)) {
                this.state = 227;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case FaustParser.IDENT:
                        this.state = 223;
                        this.definition();
                        break;
                    case FaustParser.FLOATMODE:
                    case FaustParser.DOUBLEMODE:
                    case FaustParser.QUADMODE:
                    case FaustParser.FIXEDPOINTMODE:
                        this.state = 224;
                        this.variant();
                        this.state = 225;
                        this.definition();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 231;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new ExpressionContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 30;
        this.enterRecursionRule(localctx, 30, FaustParser.RULE_expression, _p);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 233;
            localctx.infexpr = this.infixexpr(0);
            this._ctx.stop = this._input.LT(-1);
            this.state = 261;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    this.state = 259;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
                    switch (la_) {
                        case 1:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_expression);
                            this.state = 235;
                            if (!(this.precpred(this._ctx, 5))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                            }
                            this.state = 236;
                            localctx.op = this.match(FaustParser.REC);
                            this.state = 237;
                            localctx.right = this.expression(6);
                            break;
                        case 2:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_expression);
                            this.state = 238;
                            if (!(this.precpred(this._ctx, 4))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                            }
                            this.state = 239;
                            localctx.op = this.match(FaustParser.PAR);
                            this.state = 240;
                            localctx.right = this.expression(4);
                            break;
                        case 3:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_expression);
                            this.state = 241;
                            if (!(this.precpred(this._ctx, 3))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                            }
                            this.state = 242;
                            localctx.op = this.match(FaustParser.SEQ);
                            this.state = 243;
                            localctx.right = this.expression(3);
                            break;
                        case 4:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_expression);
                            this.state = 244;
                            if (!(this.precpred(this._ctx, 2))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                            }
                            this.state = 245;
                            localctx.op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === FaustParser.SPLIT || _la === FaustParser.MIX)) {
                                localctx.op = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 246;
                            localctx.right = this.expression(2);
                            break;
                        case 5:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            localctx.expr = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_expression);
                            this.state = 247;
                            if (!(this.precpred(this._ctx, 6))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                            }
                            this.state = 248;
                            localctx.op = this.match(FaustParser.LETREC);
                            this.state = 249;
                            this.match(FaustParser.LBRAQ);
                            this.state = 250;
                            localctx.recs = this.reclist();
                            this.state = 251;
                            this.match(FaustParser.RBRAQ);
                            break;
                        case 6:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            localctx.expr = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_expression);
                            this.state = 253;
                            if (!(this.precpred(this._ctx, 1))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                            }
                            this.state = 254;
                            localctx.op = this.match(FaustParser.WITH);
                            this.state = 255;
                            this.match(FaustParser.LBRAQ);
                            this.state = 256;
                            localctx.defs = this.withdef();
                            this.state = 257;
                            this.match(FaustParser.RBRAQ);
                            break;
                    }
                }
                this.state = 263;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    infixexpr(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new InfixexprContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 32;
        this.enterRecursionRule(localctx, 32, FaustParser.RULE_infixexpr, _p);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 265;
            localctx.prim = this.primitive();
            this._ctx.stop = this._input.LT(-1);
            this.state = 342;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    this.state = 340;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
                    switch (la_) {
                        case 1:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 267;
                            if (!(this.precpred(this._ctx, 20))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                            }
                            this.state = 268;
                            localctx.op = this.match(FaustParser.FDELAY);
                            this.state = 269;
                            localctx.right = this.infixexpr(21);
                            break;
                        case 2:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 270;
                            if (!(this.precpred(this._ctx, 17))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                            }
                            this.state = 271;
                            localctx.op = this.match(FaustParser.POWOP);
                            this.state = 272;
                            localctx.right = this.infixexpr(18);
                            break;
                        case 3:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 273;
                            if (!(this.precpred(this._ctx, 16))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                            }
                            this.state = 274;
                            localctx.op = this.match(FaustParser.LSH);
                            this.state = 275;
                            localctx.right = this.infixexpr(17);
                            break;
                        case 4:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 276;
                            if (!(this.precpred(this._ctx, 15))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                            }
                            this.state = 277;
                            localctx.op = this.match(FaustParser.RSH);
                            this.state = 278;
                            localctx.right = this.infixexpr(16);
                            break;
                        case 5:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 279;
                            if (!(this.precpred(this._ctx, 14))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                            }
                            this.state = 280;
                            localctx.op = this.match(FaustParser.MUL);
                            this.state = 281;
                            localctx.right = this.infixexpr(15);
                            break;
                        case 6:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 282;
                            if (!(this.precpred(this._ctx, 13))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                            }
                            this.state = 283;
                            localctx.op = this.match(FaustParser.DIV);
                            this.state = 284;
                            localctx.right = this.infixexpr(14);
                            break;
                        case 7:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 285;
                            if (!(this.precpred(this._ctx, 12))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                            }
                            this.state = 286;
                            localctx.op = this.match(FaustParser.MOD);
                            this.state = 287;
                            localctx.right = this.infixexpr(13);
                            break;
                        case 8:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 288;
                            if (!(this.precpred(this._ctx, 11))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                            }
                            this.state = 289;
                            localctx.op = this.match(FaustParser.ADD);
                            this.state = 290;
                            localctx.right = this.infixexpr(12);
                            break;
                        case 9:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 291;
                            if (!(this.precpred(this._ctx, 10))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                            }
                            this.state = 292;
                            localctx.op = this.match(FaustParser.SUB);
                            this.state = 293;
                            localctx.right = this.infixexpr(11);
                            break;
                        case 10:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 294;
                            if (!(this.precpred(this._ctx, 9))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                            }
                            this.state = 295;
                            localctx.op = this.match(FaustParser.AND);
                            this.state = 296;
                            localctx.right = this.infixexpr(10);
                            break;
                        case 11:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 297;
                            if (!(this.precpred(this._ctx, 8))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                            }
                            this.state = 298;
                            localctx.op = this.match(FaustParser.OR);
                            this.state = 299;
                            localctx.right = this.infixexpr(9);
                            break;
                        case 12:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 300;
                            if (!(this.precpred(this._ctx, 7))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                            }
                            this.state = 301;
                            localctx.op = this.match(FaustParser.XOR);
                            this.state = 302;
                            localctx.right = this.infixexpr(8);
                            break;
                        case 13:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 303;
                            if (!(this.precpred(this._ctx, 6))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                            }
                            this.state = 304;
                            localctx.op = this.match(FaustParser.LT);
                            this.state = 305;
                            localctx.right = this.infixexpr(7);
                            break;
                        case 14:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 306;
                            if (!(this.precpred(this._ctx, 5))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                            }
                            this.state = 307;
                            localctx.op = this.match(FaustParser.LE);
                            this.state = 308;
                            localctx.right = this.infixexpr(6);
                            break;
                        case 15:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 309;
                            if (!(this.precpred(this._ctx, 4))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                            }
                            this.state = 310;
                            localctx.op = this.match(FaustParser.GT);
                            this.state = 311;
                            localctx.right = this.infixexpr(5);
                            break;
                        case 16:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 312;
                            if (!(this.precpred(this._ctx, 3))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                            }
                            this.state = 313;
                            localctx.op = this.match(FaustParser.GE);
                            this.state = 314;
                            localctx.right = this.infixexpr(4);
                            break;
                        case 17:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 315;
                            if (!(this.precpred(this._ctx, 2))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                            }
                            this.state = 316;
                            localctx.op = this.match(FaustParser.EQ);
                            this.state = 317;
                            localctx.right = this.infixexpr(3);
                            break;
                        case 18:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 318;
                            if (!(this.precpred(this._ctx, 1))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                            }
                            this.state = 319;
                            localctx.op = this.match(FaustParser.NE);
                            this.state = 320;
                            localctx.right = this.infixexpr(2);
                            break;
                        case 19:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.callee = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 321;
                            if (!(this.precpred(this._ctx, 22))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                            }
                            this.state = 322;
                            this.match(FaustParser.LPAR);
                            this.state = 323;
                            localctx.arguments = this.arglist(0);
                            this.state = 324;
                            this.match(FaustParser.RPAR);
                            break;
                        case 20:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 326;
                            if (!(this.precpred(this._ctx, 21))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                            }
                            this.state = 327;
                            this.match(FaustParser.LCROC);
                            this.state = 331;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FaustParser.FLOATMODE - 101)) | (1 << (FaustParser.DOUBLEMODE - 101)) | (1 << (FaustParser.QUADMODE - 101)) | (1 << (FaustParser.FIXEDPOINTMODE - 101)) | (1 << (FaustParser.IDENT - 101)))) !== 0)) {
                                this.state = 328;
                                localctx.definitions = this.deflist();
                                this.state = 333;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 334;
                            this.match(FaustParser.RCROC);
                            break;
                        case 21:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.expr = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 335;
                            if (!(this.precpred(this._ctx, 19))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                            }
                            this.state = 336;
                            localctx.op = this.match(FaustParser.DELAY1);
                            break;
                        case 22:
                            localctx = new InfixexprContext(this, _parentctx, _parentState);
                            localctx.left = _prevctx;
                            this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_infixexpr);
                            this.state = 337;
                            if (!(this.precpred(this._ctx, 18))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                            }
                            this.state = 338;
                            localctx.op = this.match(FaustParser.DOT);
                            this.state = 339;
                            localctx.identificator = this.ident();
                            break;
                    }
                }
                this.state = 344;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    primitive() {
        let localctx = new PrimitiveContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, FaustParser.RULE_primitive);
        var _la = 0; // Token type
        try {
            this.state = 485;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 23, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 345;
                    localctx.value = this.match(FaustParser.INT);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 346;
                    localctx.value = this.match(FaustParser.FLOAT);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 347;
                    localctx.sign = this.match(FaustParser.ADD);
                    this.state = 348;
                    localctx.value = this.match(FaustParser.INT);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 349;
                    localctx.sign = this.match(FaustParser.ADD);
                    this.state = 350;
                    localctx.value = this.match(FaustParser.FLOAT);
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 351;
                    localctx.sign = this.match(FaustParser.SUB);
                    this.state = 352;
                    localctx.value = this.match(FaustParser.INT);
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 353;
                    localctx.sign = this.match(FaustParser.SUB);
                    this.state = 354;
                    localctx.value = this.match(FaustParser.FLOAT);
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 355;
                    localctx.wire = this.match(FaustParser.WIRE);
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 356;
                    localctx.cut = this.match(FaustParser.CUT);
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 357;
                    localctx.primitivetype = this.match(FaustParser.MEM);
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 358;
                    localctx.primitivetype = this.match(FaustParser.PREFIX);
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 359;
                    localctx.primitivetype = this.match(FaustParser.INTCAST);
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 360;
                    localctx.primitivetype = this.match(FaustParser.FLOATCAST);
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 361;
                    localctx.primitivetype = this.match(FaustParser.ADD);
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 362;
                    localctx.primitivetype = this.match(FaustParser.SUB);
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 363;
                    localctx.primitivetype = this.match(FaustParser.MUL);
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    this.state = 364;
                    localctx.primitivetype = this.match(FaustParser.DIV);
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    this.state = 365;
                    localctx.primitivetype = this.match(FaustParser.MOD);
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    this.state = 366;
                    localctx.primitivetype = this.match(FaustParser.FDELAY);
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    this.state = 367;
                    localctx.primitivetype = this.match(FaustParser.AND);
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    this.state = 368;
                    localctx.primitivetype = this.match(FaustParser.OR);
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    this.state = 369;
                    localctx.primitivetype = this.match(FaustParser.XOR);
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    this.state = 370;
                    localctx.primitivetype = this.match(FaustParser.LSH);
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    this.state = 371;
                    localctx.primitivetype = this.match(FaustParser.RSH);
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    this.state = 372;
                    localctx.primitivetype = this.match(FaustParser.LT);
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    this.state = 373;
                    localctx.primitivetype = this.match(FaustParser.LE);
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    this.state = 374;
                    localctx.primitivetype = this.match(FaustParser.GT);
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    this.state = 375;
                    localctx.primitivetype = this.match(FaustParser.GE);
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    this.state = 376;
                    localctx.primitivetype = this.match(FaustParser.EQ);
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    this.state = 377;
                    localctx.primitivetype = this.match(FaustParser.NE);
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    this.state = 378;
                    localctx.primitivetype = this.match(FaustParser.ATTACH);
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    this.state = 379;
                    localctx.primitivetype = this.match(FaustParser.ENABLE);
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    this.state = 380;
                    localctx.primitivetype = this.match(FaustParser.CONTROL);
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    this.state = 381;
                    localctx.primitivetype = this.match(FaustParser.ACOS);
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    this.state = 382;
                    localctx.primitivetype = this.match(FaustParser.ASIN);
                    break;
                case 35:
                    this.enterOuterAlt(localctx, 35);
                    this.state = 383;
                    localctx.primitivetype = this.match(FaustParser.ATAN);
                    break;
                case 36:
                    this.enterOuterAlt(localctx, 36);
                    this.state = 384;
                    localctx.primitivetype = this.match(FaustParser.ATAN2);
                    break;
                case 37:
                    this.enterOuterAlt(localctx, 37);
                    this.state = 385;
                    localctx.primitivetype = this.match(FaustParser.COS);
                    break;
                case 38:
                    this.enterOuterAlt(localctx, 38);
                    this.state = 386;
                    localctx.primitivetype = this.match(FaustParser.SIN);
                    break;
                case 39:
                    this.enterOuterAlt(localctx, 39);
                    this.state = 387;
                    localctx.primitivetype = this.match(FaustParser.TAN);
                    break;
                case 40:
                    this.enterOuterAlt(localctx, 40);
                    this.state = 388;
                    localctx.primitivetype = this.match(FaustParser.EXP);
                    break;
                case 41:
                    this.enterOuterAlt(localctx, 41);
                    this.state = 389;
                    localctx.primitivetype = this.match(FaustParser.LOG);
                    break;
                case 42:
                    this.enterOuterAlt(localctx, 42);
                    this.state = 390;
                    localctx.primitivetype = this.match(FaustParser.LOG10);
                    break;
                case 43:
                    this.enterOuterAlt(localctx, 43);
                    this.state = 391;
                    localctx.primitivetype = this.match(FaustParser.POWOP);
                    break;
                case 44:
                    this.enterOuterAlt(localctx, 44);
                    this.state = 392;
                    localctx.primitivetype = this.match(FaustParser.POWFUN);
                    break;
                case 45:
                    this.enterOuterAlt(localctx, 45);
                    this.state = 393;
                    localctx.primitivetype = this.match(FaustParser.SQRT);
                    break;
                case 46:
                    this.enterOuterAlt(localctx, 46);
                    this.state = 394;
                    localctx.primitivetype = this.match(FaustParser.ABS);
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 47);
                    this.state = 395;
                    localctx.primitivetype = this.match(FaustParser.MIN);
                    break;
                case 48:
                    this.enterOuterAlt(localctx, 48);
                    this.state = 396;
                    localctx.primitivetype = this.match(FaustParser.MAX);
                    break;
                case 49:
                    this.enterOuterAlt(localctx, 49);
                    this.state = 397;
                    localctx.primitivetype = this.match(FaustParser.FMOD);
                    break;
                case 50:
                    this.enterOuterAlt(localctx, 50);
                    this.state = 398;
                    localctx.primitivetype = this.match(FaustParser.REMAINDER);
                    break;
                case 51:
                    this.enterOuterAlt(localctx, 51);
                    this.state = 399;
                    localctx.primitivetype = this.match(FaustParser.FLOOR);
                    break;
                case 52:
                    this.enterOuterAlt(localctx, 52);
                    this.state = 400;
                    localctx.primitivetype = this.match(FaustParser.CEIL);
                    break;
                case 53:
                    this.enterOuterAlt(localctx, 53);
                    this.state = 401;
                    localctx.primitivetype = this.match(FaustParser.RINT);
                    break;
                case 54:
                    this.enterOuterAlt(localctx, 54);
                    this.state = 402;
                    localctx.primitivetype = this.match(FaustParser.RDTBL);
                    break;
                case 55:
                    this.enterOuterAlt(localctx, 55);
                    this.state = 403;
                    localctx.primitivetype = this.match(FaustParser.RWTBL);
                    break;
                case 56:
                    this.enterOuterAlt(localctx, 56);
                    this.state = 404;
                    localctx.primitivetype = this.match(FaustParser.SELECT2);
                    break;
                case 57:
                    this.enterOuterAlt(localctx, 57);
                    this.state = 405;
                    localctx.primitivetype = this.match(FaustParser.SELECT3);
                    break;
                case 58:
                    this.enterOuterAlt(localctx, 58);
                    this.state = 406;
                    localctx.primitiveident = this.ident();
                    break;
                case 59:
                    this.enterOuterAlt(localctx, 59);
                    this.state = 407;
                    localctx.sign = this.match(FaustParser.SUB);
                    this.state = 408;
                    localctx.primitiveident = this.ident();
                    break;
                case 60:
                    this.enterOuterAlt(localctx, 60);
                    this.state = 409;
                    this.match(FaustParser.LPAR);
                    this.state = 410;
                    localctx.primitiveexpr = this.expression(0);
                    this.state = 411;
                    this.match(FaustParser.RPAR);
                    break;
                case 61:
                    this.enterOuterAlt(localctx, 61);
                    this.state = 413;
                    this.match(FaustParser.LAMBDA);
                    this.state = 414;
                    this.match(FaustParser.LPAR);
                    this.state = 415;
                    localctx.lambdaparams = this.params(0);
                    this.state = 416;
                    this.match(FaustParser.RPAR);
                    this.state = 417;
                    this.match(FaustParser.DOT);
                    this.state = 418;
                    this.match(FaustParser.LPAR);
                    this.state = 419;
                    localctx.expr = this.expression(0);
                    this.state = 420;
                    this.match(FaustParser.RPAR);
                    break;
                case 62:
                    this.enterOuterAlt(localctx, 62);
                    this.state = 422;
                    this.match(FaustParser.CASE);
                    this.state = 423;
                    this.match(FaustParser.LBRAQ);
                    this.state = 425;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 424;
                        localctx.patterns = this.caserule();
                        this.state = 427;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === FaustParser.LPAR);
                    this.state = 429;
                    this.match(FaustParser.RBRAQ);
                    break;
                case 63:
                    this.enterOuterAlt(localctx, 63);
                    this.state = 431;
                    this.ffunction();
                    break;
                case 64:
                    this.enterOuterAlt(localctx, 64);
                    this.state = 432;
                    this.fconst();
                    break;
                case 65:
                    this.enterOuterAlt(localctx, 65);
                    this.state = 433;
                    this.fvariable();
                    break;
                case 66:
                    this.enterOuterAlt(localctx, 66);
                    this.state = 434;
                    localctx.component = this.match(FaustParser.COMPONENT);
                    this.state = 435;
                    this.match(FaustParser.LPAR);
                    this.state = 436;
                    localctx.source = this.uqstring();
                    this.state = 437;
                    this.match(FaustParser.RPAR);
                    break;
                case 67:
                    this.enterOuterAlt(localctx, 67);
                    this.state = 439;
                    localctx.library = this.match(FaustParser.LIBRARY);
                    this.state = 440;
                    this.match(FaustParser.LPAR);
                    this.state = 441;
                    localctx.source = this.uqstring();
                    this.state = 442;
                    this.match(FaustParser.RPAR);
                    break;
                case 68:
                    this.enterOuterAlt(localctx, 68);
                    this.state = 444;
                    localctx.environment = this.match(FaustParser.ENVIRONMENT);
                    this.state = 445;
                    this.match(FaustParser.LBRAQ);
                    this.state = 450;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (FaustParser.IMPORT - 90)) | (1 << (FaustParser.DECLARE - 90)) | (1 << (FaustParser.FLOATMODE - 90)) | (1 << (FaustParser.DOUBLEMODE - 90)) | (1 << (FaustParser.QUADMODE - 90)) | (1 << (FaustParser.FIXEDPOINTMODE - 90)) | (1 << (FaustParser.IDENT - 90)))) !== 0)) {
                        this.state = 448;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case FaustParser.IMPORT:
                            case FaustParser.DECLARE:
                            case FaustParser.IDENT:
                                this.state = 446;
                                this.statement();
                                break;
                            case FaustParser.FLOATMODE:
                            case FaustParser.DOUBLEMODE:
                            case FaustParser.QUADMODE:
                            case FaustParser.FIXEDPOINTMODE:
                                this.state = 447;
                                this.variantstatement();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 452;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 453;
                    this.match(FaustParser.RBRAQ);
                    break;
                case 69:
                    this.enterOuterAlt(localctx, 69);
                    this.state = 454;
                    localctx.waveform = this.match(FaustParser.WAVEFORM);
                    this.state = 455;
                    this.match(FaustParser.LBRAQ);
                    this.state = 456;
                    localctx.values = this.vallist(0);
                    this.state = 457;
                    this.match(FaustParser.RBRAQ);
                    break;
                case 70:
                    this.enterOuterAlt(localctx, 70);
                    this.state = 459;
                    localctx.route = this.match(FaustParser.ROUTE);
                    this.state = 460;
                    this.match(FaustParser.LPAR);
                    this.state = 461;
                    localctx.ins = this.argument(0);
                    this.state = 462;
                    this.match(FaustParser.PAR);
                    this.state = 463;
                    localctx.outs = this.argument(0);
                    this.state = 464;
                    this.match(FaustParser.PAR);
                    this.state = 465;
                    localctx.pairs = this.expression(0);
                    this.state = 466;
                    this.match(FaustParser.RPAR);
                    break;
                case 71:
                    this.enterOuterAlt(localctx, 71);
                    this.state = 468;
                    this.button();
                    break;
                case 72:
                    this.enterOuterAlt(localctx, 72);
                    this.state = 469;
                    this.checkbox();
                    break;
                case 73:
                    this.enterOuterAlt(localctx, 73);
                    this.state = 470;
                    this.vslider();
                    break;
                case 74:
                    this.enterOuterAlt(localctx, 74);
                    this.state = 471;
                    this.hslider();
                    break;
                case 75:
                    this.enterOuterAlt(localctx, 75);
                    this.state = 472;
                    this.nentry();
                    break;
                case 76:
                    this.enterOuterAlt(localctx, 76);
                    this.state = 473;
                    this.vgroup();
                    break;
                case 77:
                    this.enterOuterAlt(localctx, 77);
                    this.state = 474;
                    this.hgroup();
                    break;
                case 78:
                    this.enterOuterAlt(localctx, 78);
                    this.state = 475;
                    this.tgroup();
                    break;
                case 79:
                    this.enterOuterAlt(localctx, 79);
                    this.state = 476;
                    this.vbargraph();
                    break;
                case 80:
                    this.enterOuterAlt(localctx, 80);
                    this.state = 477;
                    this.hbargraph();
                    break;
                case 81:
                    this.enterOuterAlt(localctx, 81);
                    this.state = 478;
                    this.soundfile();
                    break;
                case 82:
                    this.enterOuterAlt(localctx, 82);
                    this.state = 479;
                    this.fpar();
                    break;
                case 83:
                    this.enterOuterAlt(localctx, 83);
                    this.state = 480;
                    this.fseq();
                    break;
                case 84:
                    this.enterOuterAlt(localctx, 84);
                    this.state = 481;
                    this.fsum();
                    break;
                case 85:
                    this.enterOuterAlt(localctx, 85);
                    this.state = 482;
                    this.fprod();
                    break;
                case 86:
                    this.enterOuterAlt(localctx, 86);
                    this.state = 483;
                    this.finputs();
                    break;
                case 87:
                    this.enterOuterAlt(localctx, 87);
                    this.state = 484;
                    this.foutputs();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ffunction() {
        let localctx = new FfunctionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, FaustParser.RULE_ffunction);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 487;
            this.match(FaustParser.FFUNCTION);
            this.state = 488;
            this.match(FaustParser.LPAR);
            this.state = 489;
            localctx.sign = this.signature();
            this.state = 490;
            this.match(FaustParser.PAR);
            this.state = 491;
            localctx.header = this.fstring();
            this.state = 492;
            this.match(FaustParser.PAR);
            this.state = 493;
            localctx.str = this.string();
            this.state = 494;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fconst() {
        let localctx = new FconstContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, FaustParser.RULE_fconst);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 496;
            this.match(FaustParser.FCONSTANT);
            this.state = 497;
            this.match(FaustParser.LPAR);
            this.state = 498;
            localctx.ctype = this.type();
            this.state = 499;
            localctx.cname = this.name();
            this.state = 500;
            this.match(FaustParser.PAR);
            this.state = 501;
            localctx.cstring = this.fstring();
            this.state = 502;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fvariable() {
        let localctx = new FvariableContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, FaustParser.RULE_fvariable);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 504;
            this.match(FaustParser.FVARIABLE);
            this.state = 505;
            this.match(FaustParser.LPAR);
            this.state = 506;
            localctx.vtype = this.type();
            this.state = 507;
            localctx.vname = this.name();
            this.state = 508;
            this.match(FaustParser.PAR);
            this.state = 509;
            localctx.vstring = this.fstring();
            this.state = 510;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    button() {
        let localctx = new ButtonContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, FaustParser.RULE_button);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 512;
            this.match(FaustParser.BUTTON);
            this.state = 513;
            this.match(FaustParser.LPAR);
            this.state = 514;
            localctx.caption = this.uqstring();
            this.state = 515;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    checkbox() {
        let localctx = new CheckboxContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, FaustParser.RULE_checkbox);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 517;
            this.match(FaustParser.CHECKBOX);
            this.state = 518;
            this.match(FaustParser.LPAR);
            this.state = 519;
            localctx.caption = this.uqstring();
            this.state = 520;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    vslider() {
        let localctx = new VsliderContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, FaustParser.RULE_vslider);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 522;
            this.match(FaustParser.VSLIDER);
            this.state = 523;
            this.match(FaustParser.LPAR);
            this.state = 524;
            localctx.caption = this.uqstring();
            this.state = 525;
            this.match(FaustParser.PAR);
            this.state = 526;
            localctx.initial = this.argument(0);
            this.state = 527;
            this.match(FaustParser.PAR);
            this.state = 528;
            localctx.min = this.argument(0);
            this.state = 529;
            this.match(FaustParser.PAR);
            this.state = 530;
            localctx.max = this.argument(0);
            this.state = 531;
            this.match(FaustParser.PAR);
            this.state = 532;
            localctx.step = this.argument(0);
            this.state = 533;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    hslider() {
        let localctx = new HsliderContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, FaustParser.RULE_hslider);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 535;
            this.match(FaustParser.HSLIDER);
            this.state = 536;
            this.match(FaustParser.LPAR);
            this.state = 537;
            localctx.caption = this.uqstring();
            this.state = 538;
            this.match(FaustParser.PAR);
            this.state = 539;
            localctx.initial = this.argument(0);
            this.state = 540;
            this.match(FaustParser.PAR);
            this.state = 541;
            localctx.min = this.argument(0);
            this.state = 542;
            this.match(FaustParser.PAR);
            this.state = 543;
            localctx.max = this.argument(0);
            this.state = 544;
            this.match(FaustParser.PAR);
            this.state = 545;
            localctx.step = this.argument(0);
            this.state = 546;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nentry() {
        let localctx = new NentryContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, FaustParser.RULE_nentry);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 548;
            this.match(FaustParser.NENTRY);
            this.state = 549;
            this.match(FaustParser.LPAR);
            this.state = 550;
            localctx.caption = this.uqstring();
            this.state = 551;
            this.match(FaustParser.PAR);
            this.state = 552;
            localctx.initial = this.argument(0);
            this.state = 553;
            this.match(FaustParser.PAR);
            this.state = 554;
            localctx.min = this.argument(0);
            this.state = 555;
            this.match(FaustParser.PAR);
            this.state = 556;
            localctx.max = this.argument(0);
            this.state = 557;
            this.match(FaustParser.PAR);
            this.state = 558;
            localctx.step = this.argument(0);
            this.state = 559;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    vgroup() {
        let localctx = new VgroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, FaustParser.RULE_vgroup);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 561;
            this.match(FaustParser.VGROUP);
            this.state = 562;
            this.match(FaustParser.LPAR);
            this.state = 563;
            localctx.caption = this.uqstring();
            this.state = 564;
            this.match(FaustParser.PAR);
            this.state = 565;
            localctx.expr = this.expression(0);
            this.state = 566;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    hgroup() {
        let localctx = new HgroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, FaustParser.RULE_hgroup);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 568;
            this.match(FaustParser.HGROUP);
            this.state = 569;
            this.match(FaustParser.LPAR);
            this.state = 570;
            localctx.caption = this.uqstring();
            this.state = 571;
            this.match(FaustParser.PAR);
            this.state = 572;
            localctx.expr = this.expression(0);
            this.state = 573;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tgroup() {
        let localctx = new TgroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, FaustParser.RULE_tgroup);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 575;
            this.match(FaustParser.TGROUP);
            this.state = 576;
            this.match(FaustParser.LPAR);
            this.state = 577;
            localctx.caption = this.uqstring();
            this.state = 578;
            this.match(FaustParser.PAR);
            this.state = 579;
            localctx.expr = this.expression(0);
            this.state = 580;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    vbargraph() {
        let localctx = new VbargraphContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, FaustParser.RULE_vbargraph);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 582;
            this.match(FaustParser.VBARGRAPH);
            this.state = 583;
            this.match(FaustParser.LPAR);
            this.state = 584;
            localctx.caption = this.uqstring();
            this.state = 585;
            this.match(FaustParser.PAR);
            this.state = 586;
            localctx.min = this.argument(0);
            this.state = 587;
            this.match(FaustParser.PAR);
            this.state = 588;
            localctx.max = this.argument(0);
            this.state = 589;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    hbargraph() {
        let localctx = new HbargraphContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, FaustParser.RULE_hbargraph);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 591;
            this.match(FaustParser.HBARGRAPH);
            this.state = 592;
            this.match(FaustParser.LPAR);
            this.state = 593;
            localctx.caption = this.uqstring();
            this.state = 594;
            this.match(FaustParser.PAR);
            this.state = 595;
            localctx.min = this.argument(0);
            this.state = 596;
            this.match(FaustParser.PAR);
            this.state = 597;
            localctx.max = this.argument(0);
            this.state = 598;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    soundfile() {
        let localctx = new SoundfileContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, FaustParser.RULE_soundfile);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 600;
            this.match(FaustParser.SOUNDFILE);
            this.state = 601;
            this.match(FaustParser.LPAR);
            this.state = 602;
            localctx.caption = this.uqstring();
            this.state = 603;
            this.match(FaustParser.PAR);
            this.state = 604;
            localctx.outs = this.argument(0);
            this.state = 605;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fpar() {
        let localctx = new FparContext(this, this._ctx, this.state);
        this.enterRule(localctx, 64, FaustParser.RULE_fpar);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 607;
            localctx.op = this.match(FaustParser.IPAR);
            this.state = 608;
            this.match(FaustParser.LPAR);
            this.state = 609;
            localctx.id = this.ident();
            this.state = 610;
            this.match(FaustParser.PAR);
            this.state = 611;
            localctx.arg = this.argument(0);
            this.state = 612;
            this.match(FaustParser.PAR);
            this.state = 613;
            localctx.expr = this.expression(0);
            this.state = 614;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fseq() {
        let localctx = new FseqContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, FaustParser.RULE_fseq);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 616;
            localctx.op = this.match(FaustParser.ISEQ);
            this.state = 617;
            this.match(FaustParser.LPAR);
            this.state = 618;
            localctx.id = this.ident();
            this.state = 619;
            this.match(FaustParser.PAR);
            this.state = 620;
            localctx.arg = this.argument(0);
            this.state = 621;
            this.match(FaustParser.PAR);
            this.state = 622;
            localctx.expr = this.expression(0);
            this.state = 623;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fsum() {
        let localctx = new FsumContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, FaustParser.RULE_fsum);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 625;
            localctx.op = this.match(FaustParser.ISUM);
            this.state = 626;
            this.match(FaustParser.LPAR);
            this.state = 627;
            localctx.id = this.ident();
            this.state = 628;
            this.match(FaustParser.PAR);
            this.state = 629;
            localctx.arg = this.argument(0);
            this.state = 630;
            this.match(FaustParser.PAR);
            this.state = 631;
            localctx.expr = this.expression(0);
            this.state = 632;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fprod() {
        let localctx = new FprodContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, FaustParser.RULE_fprod);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 634;
            localctx.op = this.match(FaustParser.IPROD);
            this.state = 635;
            this.match(FaustParser.LPAR);
            this.state = 636;
            localctx.id = this.ident();
            this.state = 637;
            this.match(FaustParser.PAR);
            this.state = 638;
            localctx.arg = this.argument(0);
            this.state = 639;
            this.match(FaustParser.PAR);
            this.state = 640;
            localctx.expr = this.expression(0);
            this.state = 641;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    finputs() {
        let localctx = new FinputsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, FaustParser.RULE_finputs);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 643;
            this.match(FaustParser.INPUTS);
            this.state = 644;
            this.match(FaustParser.LPAR);
            this.state = 645;
            localctx.expr = this.expression(0);
            this.state = 646;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    foutputs() {
        let localctx = new FoutputsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, FaustParser.RULE_foutputs);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 648;
            this.match(FaustParser.OUTPUTS);
            this.state = 649;
            this.match(FaustParser.LPAR);
            this.state = 650;
            localctx.expr = this.expression(0);
            this.state = 651;
            this.match(FaustParser.RPAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    caserule() {
        let localctx = new CaseruleContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, FaustParser.RULE_caserule);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 653;
            this.match(FaustParser.LPAR);
            this.state = 654;
            localctx.args = this.arglist(0);
            this.state = 655;
            this.match(FaustParser.RPAR);
            this.state = 656;
            this.match(FaustParser.ARROW);
            this.state = 657;
            localctx.expr = this.expression(0);
            this.state = 658;
            this.match(FaustParser.ENDDEF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ident() {
        let localctx = new IdentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, FaustParser.RULE_ident);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 660;
            localctx.identname = this.match(FaustParser.IDENT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    uqstring() {
        let localctx = new UqstringContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, FaustParser.RULE_uqstring);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 662;
            this.match(FaustParser.STRING);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fstring() {
        let localctx = new FstringContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, FaustParser.RULE_fstring);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 664;
            localctx.str = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === FaustParser.STRING || _la === FaustParser.FSTRING)) {
                localctx.str = this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    vallist(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new VallistContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 84;
        this.enterRecursionRule(localctx, 84, FaustParser.RULE_vallist, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 667;
            localctx.n = this.number();
            this._ctx.stop = this._input.LT(-1);
            this.state = 674;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new VallistContext(this, _parentctx, _parentState);
                    localctx.list = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_vallist);
                    this.state = 669;
                    if (!(this.precpred(this._ctx, 1))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 670;
                    this.match(FaustParser.PAR);
                    this.state = 671;
                    localctx.n = this.number();
                }
                this.state = 676;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    number() {
        let localctx = new NumberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, FaustParser.RULE_number);
        try {
            this.state = 687;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 25, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 677;
                    localctx.n = this.match(FaustParser.INT);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 678;
                    localctx.n = this.match(FaustParser.FLOAT);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 679;
                    localctx.sign = this.match(FaustParser.ADD);
                    this.state = 680;
                    localctx.n = this.match(FaustParser.INT);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 681;
                    localctx.sign = this.match(FaustParser.ADD);
                    this.state = 682;
                    localctx.n = this.match(FaustParser.FLOAT);
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 683;
                    localctx.sign = this.match(FaustParser.SUB);
                    this.state = 684;
                    localctx.n = this.match(FaustParser.INT);
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 685;
                    localctx.sign = this.match(FaustParser.SUB);
                    this.state = 686;
                    localctx.n = this.match(FaustParser.FLOAT);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    string() {
        let localctx = new StringContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, FaustParser.RULE_string);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 689;
            localctx.s = this.match(FaustParser.STRING);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    name() {
        let localctx = new NameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, FaustParser.RULE_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 691;
            localctx.n = this.match(FaustParser.IDENT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type() {
        let localctx = new TypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, FaustParser.RULE_type);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 693;
            localctx.intFloatType = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === FaustParser.INTCAST || _la === FaustParser.FLOATCAST)) {
                localctx.intFloatType = this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    signature() {
        let localctx = new SignatureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, FaustParser.RULE_signature);
        try {
            this.state = 706;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 695;
                    localctx.fntype = this.type();
                    this.state = 696;
                    localctx.fn = this.fun();
                    this.state = 697;
                    this.match(FaustParser.LPAR);
                    this.state = 698;
                    localctx.fntypelist = this.typelist(0);
                    this.state = 699;
                    this.match(FaustParser.RPAR);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 701;
                    localctx.fntype = this.type();
                    this.state = 702;
                    localctx.fn = this.fun();
                    this.state = 703;
                    this.match(FaustParser.LPAR);
                    this.state = 704;
                    this.match(FaustParser.RPAR);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fun() {
        let localctx = new FunContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, FaustParser.RULE_fun);
        try {
            this.state = 717;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 708;
                    localctx.sp = this.match(FaustParser.IDENT);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 709;
                    localctx.sp = this.match(FaustParser.IDENT);
                    this.state = 710;
                    this.match(FaustParser.OR);
                    this.state = 711;
                    localctx.dp = this.match(FaustParser.IDENT);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 712;
                    localctx.sp = this.match(FaustParser.IDENT);
                    this.state = 713;
                    this.match(FaustParser.OR);
                    this.state = 714;
                    localctx.dp = this.match(FaustParser.IDENT);
                    this.state = 715;
                    this.match(FaustParser.OR);
                    this.state = 716;
                    localctx.qp = this.match(FaustParser.IDENT);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typelist(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new TypelistContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 98;
        this.enterRecursionRule(localctx, 98, FaustParser.RULE_typelist, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 720;
            localctx.fntype = this.type();
            this._ctx.stop = this._input.LT(-1);
            this.state = 727;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 28, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new TypelistContext(this, _parentctx, _parentState);
                    localctx.fntypelist = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FaustParser.RULE_typelist);
                    this.state = 722;
                    if (!(this.precpred(this._ctx, 1))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 723;
                    this.match(FaustParser.PAR);
                    this.state = 724;
                    localctx.fntype = this.type();
                }
                this.state = 729;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 28, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
}
exports.default = FaustParser;
FaustParser.grammarFileName = "FaustParser.g4";
FaustParser.literalNames = [null, null, null, "':'", "','", "'<:'", null,
    "'~'", "'+'", "'-'", "'*'", "'/'", "'%'", "'@'",
    "'''", "'&'", "'|'", "'xor'", "'<<'", "'>>'",
    "'<'", "'<='", "'>'", "'>='", "'=='", "'!='",
    "'_'", "'!'", "';'", "'='", "'('", "')'", "'{'",
    "'}'", "'['", "']'", "'\\'", "'.'", "'with'",
    "'letrec'", "'mem'", "'prefix'", "'int'", "'float'",
    "'rdtable'", "'rwtable'", "'select2'", "'select3'",
    "'ffunction'", "'fconstant'", "'fvariable'",
    "'button'", "'checkbox'", "'vslider'", "'hslider'",
    "'nentry'", "'vgroup'", "'hgroup'", "'tgroup'",
    "'vbargraph'", "'hbargraph'", "'soundfile'",
    "'attach'", "'acos'", "'asin'", "'atan'", "'atan2'",
    "'cos'", "'sin'", "'tan'", "'exp'", "'log'",
    "'log10'", "'^'", "'pow'", "'sqrt'", "'abs'",
    "'min'", "'max'", "'fmod'", "'remainder'", "'floor'",
    "'ceil'", "'rint'", "'seq'", "'par'", "'sum'",
    "'prod'", "'inputs'", "'outputs'", "'import'",
    "'component'", "'library'", "'environment'",
    "'waveform'", "'route'", "'enable'", "'control'",
    "'declare'", "'case'", "'=>'", "'singleprecision'",
    "'doubleprecision'", "'quadprecision'", "'fixedpointprecision'"];
FaustParser.symbolicNames = [null, "INT", "FLOAT", "SEQ", "PAR", "SPLIT",
    "MIX", "REC", "ADD", "SUB", "MUL", "DIV", "MOD",
    "FDELAY", "DELAY1", "AND", "OR", "XOR", "LSH",
    "RSH", "LT", "LE", "GT", "GE", "EQ", "NE",
    "WIRE", "CUT", "ENDDEF", "DEF", "LPAR", "RPAR",
    "LBRAQ", "RBRAQ", "LCROC", "RCROC", "LAMBDA",
    "DOT", "WITH", "LETREC", "MEM", "PREFIX", "INTCAST",
    "FLOATCAST", "RDTBL", "RWTBL", "SELECT2", "SELECT3",
    "FFUNCTION", "FCONSTANT", "FVARIABLE", "BUTTON",
    "CHECKBOX", "VSLIDER", "HSLIDER", "NENTRY",
    "VGROUP", "HGROUP", "TGROUP", "VBARGRAPH",
    "HBARGRAPH", "SOUNDFILE", "ATTACH", "ACOS",
    "ASIN", "ATAN", "ATAN2", "COS", "SIN", "TAN",
    "EXP", "LOG", "LOG10", "POWOP", "POWFUN", "SQRT",
    "ABS", "MIN", "MAX", "FMOD", "REMAINDER", "FLOOR",
    "CEIL", "RINT", "ISEQ", "IPAR", "ISUM", "IPROD",
    "INPUTS", "OUTPUTS", "IMPORT", "COMPONENT",
    "LIBRARY", "ENVIRONMENT", "WAVEFORM", "ROUTE",
    "ENABLE", "CONTROL", "DECLARE", "CASE", "ARROW",
    "FLOATMODE", "DOUBLEMODE", "QUADMODE", "FIXEDPOINTMODE",
    "IDENT", "STRING", "UNTERMINATED_STRING", "FSTRING",
    "COMMENT", "LINE_COMMENT", "MDOC", "WSPACE",
    "ErrorChar"];
FaustParser.ruleNames = ["variantstatement", "program", "variant", "importStatement",
    "statement", "definition", "defname", "arglist",
    "reclist", "recinition", "recname", "deflist",
    "argument", "params", "withdef", "expression",
    "infixexpr", "primitive", "ffunction", "fconst",
    "fvariable", "button", "checkbox", "vslider", "hslider",
    "nentry", "vgroup", "hgroup", "tgroup", "vbargraph",
    "hbargraph", "soundfile", "fpar", "fseq", "fsum",
    "fprod", "finputs", "foutputs", "caserule", "ident",
    "uqstring", "fstring", "vallist", "number", "string",
    "name", "type", "signature", "fun", "typelist"];
FaustParser.EOF = antlr4_1.default.Token.EOF;
FaustParser.INT = 1;
FaustParser.FLOAT = 2;
FaustParser.SEQ = 3;
FaustParser.PAR = 4;
FaustParser.SPLIT = 5;
FaustParser.MIX = 6;
FaustParser.REC = 7;
FaustParser.ADD = 8;
FaustParser.SUB = 9;
FaustParser.MUL = 10;
FaustParser.DIV = 11;
FaustParser.MOD = 12;
FaustParser.FDELAY = 13;
FaustParser.DELAY1 = 14;
FaustParser.AND = 15;
FaustParser.OR = 16;
FaustParser.XOR = 17;
FaustParser.LSH = 18;
FaustParser.RSH = 19;
FaustParser.LT = 20;
FaustParser.LE = 21;
FaustParser.GT = 22;
FaustParser.GE = 23;
FaustParser.EQ = 24;
FaustParser.NE = 25;
FaustParser.WIRE = 26;
FaustParser.CUT = 27;
FaustParser.ENDDEF = 28;
FaustParser.DEF = 29;
FaustParser.LPAR = 30;
FaustParser.RPAR = 31;
FaustParser.LBRAQ = 32;
FaustParser.RBRAQ = 33;
FaustParser.LCROC = 34;
FaustParser.RCROC = 35;
FaustParser.LAMBDA = 36;
FaustParser.DOT = 37;
FaustParser.WITH = 38;
FaustParser.LETREC = 39;
FaustParser.MEM = 40;
FaustParser.PREFIX = 41;
FaustParser.INTCAST = 42;
FaustParser.FLOATCAST = 43;
FaustParser.RDTBL = 44;
FaustParser.RWTBL = 45;
FaustParser.SELECT2 = 46;
FaustParser.SELECT3 = 47;
FaustParser.FFUNCTION = 48;
FaustParser.FCONSTANT = 49;
FaustParser.FVARIABLE = 50;
FaustParser.BUTTON = 51;
FaustParser.CHECKBOX = 52;
FaustParser.VSLIDER = 53;
FaustParser.HSLIDER = 54;
FaustParser.NENTRY = 55;
FaustParser.VGROUP = 56;
FaustParser.HGROUP = 57;
FaustParser.TGROUP = 58;
FaustParser.VBARGRAPH = 59;
FaustParser.HBARGRAPH = 60;
FaustParser.SOUNDFILE = 61;
FaustParser.ATTACH = 62;
FaustParser.ACOS = 63;
FaustParser.ASIN = 64;
FaustParser.ATAN = 65;
FaustParser.ATAN2 = 66;
FaustParser.COS = 67;
FaustParser.SIN = 68;
FaustParser.TAN = 69;
FaustParser.EXP = 70;
FaustParser.LOG = 71;
FaustParser.LOG10 = 72;
FaustParser.POWOP = 73;
FaustParser.POWFUN = 74;
FaustParser.SQRT = 75;
FaustParser.ABS = 76;
FaustParser.MIN = 77;
FaustParser.MAX = 78;
FaustParser.FMOD = 79;
FaustParser.REMAINDER = 80;
FaustParser.FLOOR = 81;
FaustParser.CEIL = 82;
FaustParser.RINT = 83;
FaustParser.ISEQ = 84;
FaustParser.IPAR = 85;
FaustParser.ISUM = 86;
FaustParser.IPROD = 87;
FaustParser.INPUTS = 88;
FaustParser.OUTPUTS = 89;
FaustParser.IMPORT = 90;
FaustParser.COMPONENT = 91;
FaustParser.LIBRARY = 92;
FaustParser.ENVIRONMENT = 93;
FaustParser.WAVEFORM = 94;
FaustParser.ROUTE = 95;
FaustParser.ENABLE = 96;
FaustParser.CONTROL = 97;
FaustParser.DECLARE = 98;
FaustParser.CASE = 99;
FaustParser.ARROW = 100;
FaustParser.FLOATMODE = 101;
FaustParser.DOUBLEMODE = 102;
FaustParser.QUADMODE = 103;
FaustParser.FIXEDPOINTMODE = 104;
FaustParser.IDENT = 105;
FaustParser.STRING = 106;
FaustParser.UNTERMINATED_STRING = 107;
FaustParser.FSTRING = 108;
FaustParser.COMMENT = 109;
FaustParser.LINE_COMMENT = 110;
FaustParser.MDOC = 111;
FaustParser.WSPACE = 112;
FaustParser.ErrorChar = 113;
FaustParser.RULE_variantstatement = 0;
FaustParser.RULE_program = 1;
FaustParser.RULE_variant = 2;
FaustParser.RULE_importStatement = 3;
FaustParser.RULE_statement = 4;
FaustParser.RULE_definition = 5;
FaustParser.RULE_defname = 6;
FaustParser.RULE_arglist = 7;
FaustParser.RULE_reclist = 8;
FaustParser.RULE_recinition = 9;
FaustParser.RULE_recname = 10;
FaustParser.RULE_deflist = 11;
FaustParser.RULE_argument = 12;
FaustParser.RULE_params = 13;
FaustParser.RULE_withdef = 14;
FaustParser.RULE_expression = 15;
FaustParser.RULE_infixexpr = 16;
FaustParser.RULE_primitive = 17;
FaustParser.RULE_ffunction = 18;
FaustParser.RULE_fconst = 19;
FaustParser.RULE_fvariable = 20;
FaustParser.RULE_button = 21;
FaustParser.RULE_checkbox = 22;
FaustParser.RULE_vslider = 23;
FaustParser.RULE_hslider = 24;
FaustParser.RULE_nentry = 25;
FaustParser.RULE_vgroup = 26;
FaustParser.RULE_hgroup = 27;
FaustParser.RULE_tgroup = 28;
FaustParser.RULE_vbargraph = 29;
FaustParser.RULE_hbargraph = 30;
FaustParser.RULE_soundfile = 31;
FaustParser.RULE_fpar = 32;
FaustParser.RULE_fseq = 33;
FaustParser.RULE_fsum = 34;
FaustParser.RULE_fprod = 35;
FaustParser.RULE_finputs = 36;
FaustParser.RULE_foutputs = 37;
FaustParser.RULE_caserule = 38;
FaustParser.RULE_ident = 39;
FaustParser.RULE_uqstring = 40;
FaustParser.RULE_fstring = 41;
FaustParser.RULE_vallist = 42;
FaustParser.RULE_number = 43;
FaustParser.RULE_string = 44;
FaustParser.RULE_name = 45;
FaustParser.RULE_type = 46;
FaustParser.RULE_signature = 47;
FaustParser.RULE_fun = 48;
FaustParser.RULE_typelist = 49;
class VariantstatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variant = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariantContext);
            }
            else {
                return this.getTypedRuleContext(VariantContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_variantstatement;
        this.variantStatement = null; // StatementContext
    }
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterVariantstatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitVariantstatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitVariantstatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VariantstatementContext = VariantstatementContext;
class ProgramContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.statement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementContext);
            }
            else {
                return this.getTypedRuleContext(StatementContext, i);
            }
        };
        this.variantstatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariantstatementContext);
            }
            else {
                return this.getTypedRuleContext(VariantstatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_program;
    }
    EOF() {
        return this.getToken(FaustParser.EOF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterProgram(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitProgram(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitProgram(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ProgramContext = ProgramContext;
class VariantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_variant;
        this.precision = null; // Token
    }
    FLOATMODE() {
        return this.getToken(FaustParser.FLOATMODE, 0);
    }
    ;
    DOUBLEMODE() {
        return this.getToken(FaustParser.DOUBLEMODE, 0);
    }
    ;
    QUADMODE() {
        return this.getToken(FaustParser.QUADMODE, 0);
    }
    ;
    FIXEDPOINTMODE() {
        return this.getToken(FaustParser.FIXEDPOINTMODE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterVariant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitVariant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitVariant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VariantContext = VariantContext;
class ImportStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_importStatement;
        this.importName = null; // UqstringContext
    }
    IMPORT() {
        return this.getToken(FaustParser.IMPORT, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    ENDDEF() {
        return this.getToken(FaustParser.ENDDEF, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterImportStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitImportStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitImportStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ImportStatementContext = ImportStatementContext;
class StatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NameContext);
            }
            else {
                return this.getTypedRuleContext(NameContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_statement;
        this.imp = null; // ImportStatementContext
        this.decname = null; // NameContext
        this.decval = null; // StringContext
        this.decarg = null; // NameContext
        this.def = null; // DefinitionContext
    }
    importStatement() {
        return this.getTypedRuleContext(ImportStatementContext, 0);
    }
    ;
    DECLARE() {
        return this.getToken(FaustParser.DECLARE, 0);
    }
    ;
    ENDDEF() {
        return this.getToken(FaustParser.ENDDEF, 0);
    }
    ;
    string() {
        return this.getTypedRuleContext(StringContext, 0);
    }
    ;
    definition() {
        return this.getTypedRuleContext(DefinitionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StatementContext = StatementContext;
class DefinitionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_definition;
        this.identname = null; // DefnameContext
        this.args = null; // ArglistContext
        this.expr = null; // ExpressionContext
    }
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    DEF() {
        return this.getToken(FaustParser.DEF, 0);
    }
    ;
    ENDDEF() {
        return this.getToken(FaustParser.ENDDEF, 0);
    }
    ;
    defname() {
        return this.getTypedRuleContext(DefnameContext, 0);
    }
    ;
    arglist() {
        return this.getTypedRuleContext(ArglistContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterDefinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitDefinition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DefinitionContext = DefinitionContext;
class DefnameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_defname;
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterDefname(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitDefname(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitDefname(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DefnameContext = DefnameContext;
class ArglistContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_arglist;
        this.list = null; // ArglistContext
        this.arg = null; // ArgumentContext
        this.op = null; // Token
    }
    argument() {
        return this.getTypedRuleContext(ArgumentContext, 0);
    }
    ;
    arglist() {
        return this.getTypedRuleContext(ArglistContext, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterArglist(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitArglist(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitArglist(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArglistContext = ArglistContext;
class ReclistContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.recinition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(RecinitionContext);
            }
            else {
                return this.getTypedRuleContext(RecinitionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_reclist;
    }
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterReclist(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitReclist(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitReclist(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ReclistContext = ReclistContext;
class RecinitionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_recinition;
        this.identname = null; // RecnameContext
        this.expr = null; // ExpressionContext
    }
    DEF() {
        return this.getToken(FaustParser.DEF, 0);
    }
    ;
    ENDDEF() {
        return this.getToken(FaustParser.ENDDEF, 0);
    }
    ;
    recname() {
        return this.getTypedRuleContext(RecnameContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterRecinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitRecinition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitRecinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.RecinitionContext = RecinitionContext;
class RecnameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_recname;
        this.identname = null; // IdentContext
    }
    DELAY1() {
        return this.getToken(FaustParser.DELAY1, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterRecname(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitRecname(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitRecname(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.RecnameContext = RecnameContext;
class DeflistContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variant = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariantContext);
            }
            else {
                return this.getTypedRuleContext(VariantContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_deflist;
        this.def = null; // DefinitionContext
    }
    definition() {
        return this.getTypedRuleContext(DefinitionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterDeflist(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitDeflist(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitDeflist(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.DeflistContext = DeflistContext;
class ArgumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_argument;
        this.left = null; // ArgumentContext
        this.expr = null; // InfixexprContext
        this.op = null; // Token
        this.right = null; // ArgumentContext
    }
    infixexpr() {
        return this.getTypedRuleContext(InfixexprContext, 0);
    }
    ;
    SEQ() {
        return this.getToken(FaustParser.SEQ, 0);
    }
    ;
    SPLIT() {
        return this.getToken(FaustParser.SPLIT, 0);
    }
    ;
    MIX() {
        return this.getToken(FaustParser.MIX, 0);
    }
    ;
    REC() {
        return this.getToken(FaustParser.REC, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterArgument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitArgument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitArgument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArgumentContext = ArgumentContext;
class ParamsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_params;
        this.pars = null; // ParamsContext
        this.id = null; // IdentContext
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    params() {
        return this.getTypedRuleContext(ParamsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterParams(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitParams(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitParams(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ParamsContext = ParamsContext;
class WithdefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.definition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(DefinitionContext);
            }
            else {
                return this.getTypedRuleContext(DefinitionContext, i);
            }
        };
        this.variant = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariantContext);
            }
            else {
                return this.getTypedRuleContext(VariantContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_withdef;
    }
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterWithdef(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitWithdef(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitWithdef(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.WithdefContext = WithdefContext;
class ExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_expression;
        this.expr = null; // ExpressionContext
        this.left = null; // ExpressionContext
        this.infexpr = null; // InfixexprContext
        this.op = null; // Token
        this.right = null; // ExpressionContext
        this.recs = null; // ReclistContext
        this.defs = null; // WithdefContext
    }
    infixexpr() {
        return this.getTypedRuleContext(InfixexprContext, 0);
    }
    ;
    REC() {
        return this.getToken(FaustParser.REC, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    SEQ() {
        return this.getToken(FaustParser.SEQ, 0);
    }
    ;
    SPLIT() {
        return this.getToken(FaustParser.SPLIT, 0);
    }
    ;
    MIX() {
        return this.getToken(FaustParser.MIX, 0);
    }
    ;
    LBRAQ() {
        return this.getToken(FaustParser.LBRAQ, 0);
    }
    ;
    RBRAQ() {
        return this.getToken(FaustParser.RBRAQ, 0);
    }
    ;
    LETREC() {
        return this.getToken(FaustParser.LETREC, 0);
    }
    ;
    reclist() {
        return this.getTypedRuleContext(ReclistContext, 0);
    }
    ;
    WITH() {
        return this.getToken(FaustParser.WITH, 0);
    }
    ;
    withdef() {
        return this.getTypedRuleContext(WithdefContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionContext = ExpressionContext;
class InfixexprContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.infixexpr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InfixexprContext);
            }
            else {
                return this.getTypedRuleContext(InfixexprContext, i);
            }
        };
        this.deflist = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(DeflistContext);
            }
            else {
                return this.getTypedRuleContext(DeflistContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_infixexpr;
        this.callee = null; // InfixexprContext
        this.left = null; // InfixexprContext
        this.expr = null; // InfixexprContext
        this.prim = null; // PrimitiveContext
        this.op = null; // Token
        this.right = null; // InfixexprContext
        this.arguments = null; // ArglistContext
        this.definitions = null; // DeflistContext
        this.identificator = null; // IdentContext
    }
    primitive() {
        return this.getTypedRuleContext(PrimitiveContext, 0);
    }
    ;
    FDELAY() {
        return this.getToken(FaustParser.FDELAY, 0);
    }
    ;
    POWOP() {
        return this.getToken(FaustParser.POWOP, 0);
    }
    ;
    LSH() {
        return this.getToken(FaustParser.LSH, 0);
    }
    ;
    RSH() {
        return this.getToken(FaustParser.RSH, 0);
    }
    ;
    MUL() {
        return this.getToken(FaustParser.MUL, 0);
    }
    ;
    DIV() {
        return this.getToken(FaustParser.DIV, 0);
    }
    ;
    MOD() {
        return this.getToken(FaustParser.MOD, 0);
    }
    ;
    ADD() {
        return this.getToken(FaustParser.ADD, 0);
    }
    ;
    SUB() {
        return this.getToken(FaustParser.SUB, 0);
    }
    ;
    AND() {
        return this.getToken(FaustParser.AND, 0);
    }
    ;
    OR() {
        return this.getToken(FaustParser.OR, 0);
    }
    ;
    XOR() {
        return this.getToken(FaustParser.XOR, 0);
    }
    ;
    LT() {
        return this.getToken(FaustParser.LT, 0);
    }
    ;
    LE() {
        return this.getToken(FaustParser.LE, 0);
    }
    ;
    GT() {
        return this.getToken(FaustParser.GT, 0);
    }
    ;
    GE() {
        return this.getToken(FaustParser.GE, 0);
    }
    ;
    EQ() {
        return this.getToken(FaustParser.EQ, 0);
    }
    ;
    NE() {
        return this.getToken(FaustParser.NE, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    arglist() {
        return this.getTypedRuleContext(ArglistContext, 0);
    }
    ;
    LCROC() {
        return this.getToken(FaustParser.LCROC, 0);
    }
    ;
    RCROC() {
        return this.getToken(FaustParser.RCROC, 0);
    }
    ;
    DELAY1() {
        return this.getToken(FaustParser.DELAY1, 0);
    }
    ;
    DOT() {
        return this.getToken(FaustParser.DOT, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterInfixexpr(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitInfixexpr(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitInfixexpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.InfixexprContext = InfixexprContext;
class PrimitiveContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LPAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.LPAR);
            }
            else {
                return this.getToken(FaustParser.LPAR, i);
            }
        };
        this.RPAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.RPAR);
            }
            else {
                return this.getToken(FaustParser.RPAR, i);
            }
        };
        this.caserule = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CaseruleContext);
            }
            else {
                return this.getTypedRuleContext(CaseruleContext, i);
            }
        };
        this.statement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementContext);
            }
            else {
                return this.getTypedRuleContext(StatementContext, i);
            }
        };
        this.variantstatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariantstatementContext);
            }
            else {
                return this.getTypedRuleContext(VariantstatementContext, i);
            }
        };
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_primitive;
        this.value = null; // Token
        this.sign = null; // Token
        this.wire = null; // Token
        this.cut = null; // Token
        this.primitivetype = null; // Token
        this.primitiveident = null; // IdentContext
        this.primitiveexpr = null; // ExpressionContext
        this.lambdaparams = null; // ParamsContext
        this.expr = null; // ExpressionContext
        this.patterns = null; // CaseruleContext
        this.component = null; // Token
        this.source = null; // UqstringContext
        this.library = null; // Token
        this.environment = null; // Token
        this.waveform = null; // Token
        this.values = null; // VallistContext
        this.route = null; // Token
        this.ins = null; // ArgumentContext
        this.outs = null; // ArgumentContext
        this.pairs = null; // ExpressionContext
    }
    INT() {
        return this.getToken(FaustParser.INT, 0);
    }
    ;
    FLOAT() {
        return this.getToken(FaustParser.FLOAT, 0);
    }
    ;
    ADD() {
        return this.getToken(FaustParser.ADD, 0);
    }
    ;
    SUB() {
        return this.getToken(FaustParser.SUB, 0);
    }
    ;
    WIRE() {
        return this.getToken(FaustParser.WIRE, 0);
    }
    ;
    CUT() {
        return this.getToken(FaustParser.CUT, 0);
    }
    ;
    MEM() {
        return this.getToken(FaustParser.MEM, 0);
    }
    ;
    PREFIX() {
        return this.getToken(FaustParser.PREFIX, 0);
    }
    ;
    INTCAST() {
        return this.getToken(FaustParser.INTCAST, 0);
    }
    ;
    FLOATCAST() {
        return this.getToken(FaustParser.FLOATCAST, 0);
    }
    ;
    MUL() {
        return this.getToken(FaustParser.MUL, 0);
    }
    ;
    DIV() {
        return this.getToken(FaustParser.DIV, 0);
    }
    ;
    MOD() {
        return this.getToken(FaustParser.MOD, 0);
    }
    ;
    FDELAY() {
        return this.getToken(FaustParser.FDELAY, 0);
    }
    ;
    AND() {
        return this.getToken(FaustParser.AND, 0);
    }
    ;
    OR() {
        return this.getToken(FaustParser.OR, 0);
    }
    ;
    XOR() {
        return this.getToken(FaustParser.XOR, 0);
    }
    ;
    LSH() {
        return this.getToken(FaustParser.LSH, 0);
    }
    ;
    RSH() {
        return this.getToken(FaustParser.RSH, 0);
    }
    ;
    LT() {
        return this.getToken(FaustParser.LT, 0);
    }
    ;
    LE() {
        return this.getToken(FaustParser.LE, 0);
    }
    ;
    GT() {
        return this.getToken(FaustParser.GT, 0);
    }
    ;
    GE() {
        return this.getToken(FaustParser.GE, 0);
    }
    ;
    EQ() {
        return this.getToken(FaustParser.EQ, 0);
    }
    ;
    NE() {
        return this.getToken(FaustParser.NE, 0);
    }
    ;
    ATTACH() {
        return this.getToken(FaustParser.ATTACH, 0);
    }
    ;
    ENABLE() {
        return this.getToken(FaustParser.ENABLE, 0);
    }
    ;
    CONTROL() {
        return this.getToken(FaustParser.CONTROL, 0);
    }
    ;
    ACOS() {
        return this.getToken(FaustParser.ACOS, 0);
    }
    ;
    ASIN() {
        return this.getToken(FaustParser.ASIN, 0);
    }
    ;
    ATAN() {
        return this.getToken(FaustParser.ATAN, 0);
    }
    ;
    ATAN2() {
        return this.getToken(FaustParser.ATAN2, 0);
    }
    ;
    COS() {
        return this.getToken(FaustParser.COS, 0);
    }
    ;
    SIN() {
        return this.getToken(FaustParser.SIN, 0);
    }
    ;
    TAN() {
        return this.getToken(FaustParser.TAN, 0);
    }
    ;
    EXP() {
        return this.getToken(FaustParser.EXP, 0);
    }
    ;
    LOG() {
        return this.getToken(FaustParser.LOG, 0);
    }
    ;
    LOG10() {
        return this.getToken(FaustParser.LOG10, 0);
    }
    ;
    POWOP() {
        return this.getToken(FaustParser.POWOP, 0);
    }
    ;
    POWFUN() {
        return this.getToken(FaustParser.POWFUN, 0);
    }
    ;
    SQRT() {
        return this.getToken(FaustParser.SQRT, 0);
    }
    ;
    ABS() {
        return this.getToken(FaustParser.ABS, 0);
    }
    ;
    MIN() {
        return this.getToken(FaustParser.MIN, 0);
    }
    ;
    MAX() {
        return this.getToken(FaustParser.MAX, 0);
    }
    ;
    FMOD() {
        return this.getToken(FaustParser.FMOD, 0);
    }
    ;
    REMAINDER() {
        return this.getToken(FaustParser.REMAINDER, 0);
    }
    ;
    FLOOR() {
        return this.getToken(FaustParser.FLOOR, 0);
    }
    ;
    CEIL() {
        return this.getToken(FaustParser.CEIL, 0);
    }
    ;
    RINT() {
        return this.getToken(FaustParser.RINT, 0);
    }
    ;
    RDTBL() {
        return this.getToken(FaustParser.RDTBL, 0);
    }
    ;
    RWTBL() {
        return this.getToken(FaustParser.RWTBL, 0);
    }
    ;
    SELECT2() {
        return this.getToken(FaustParser.SELECT2, 0);
    }
    ;
    SELECT3() {
        return this.getToken(FaustParser.SELECT3, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    LAMBDA() {
        return this.getToken(FaustParser.LAMBDA, 0);
    }
    ;
    DOT() {
        return this.getToken(FaustParser.DOT, 0);
    }
    ;
    params() {
        return this.getTypedRuleContext(ParamsContext, 0);
    }
    ;
    CASE() {
        return this.getToken(FaustParser.CASE, 0);
    }
    ;
    LBRAQ() {
        return this.getToken(FaustParser.LBRAQ, 0);
    }
    ;
    RBRAQ() {
        return this.getToken(FaustParser.RBRAQ, 0);
    }
    ;
    ffunction() {
        return this.getTypedRuleContext(FfunctionContext, 0);
    }
    ;
    fconst() {
        return this.getTypedRuleContext(FconstContext, 0);
    }
    ;
    fvariable() {
        return this.getTypedRuleContext(FvariableContext, 0);
    }
    ;
    COMPONENT() {
        return this.getToken(FaustParser.COMPONENT, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    LIBRARY() {
        return this.getToken(FaustParser.LIBRARY, 0);
    }
    ;
    ENVIRONMENT() {
        return this.getToken(FaustParser.ENVIRONMENT, 0);
    }
    ;
    WAVEFORM() {
        return this.getToken(FaustParser.WAVEFORM, 0);
    }
    ;
    vallist() {
        return this.getTypedRuleContext(VallistContext, 0);
    }
    ;
    ROUTE() {
        return this.getToken(FaustParser.ROUTE, 0);
    }
    ;
    button() {
        return this.getTypedRuleContext(ButtonContext, 0);
    }
    ;
    checkbox() {
        return this.getTypedRuleContext(CheckboxContext, 0);
    }
    ;
    vslider() {
        return this.getTypedRuleContext(VsliderContext, 0);
    }
    ;
    hslider() {
        return this.getTypedRuleContext(HsliderContext, 0);
    }
    ;
    nentry() {
        return this.getTypedRuleContext(NentryContext, 0);
    }
    ;
    vgroup() {
        return this.getTypedRuleContext(VgroupContext, 0);
    }
    ;
    hgroup() {
        return this.getTypedRuleContext(HgroupContext, 0);
    }
    ;
    tgroup() {
        return this.getTypedRuleContext(TgroupContext, 0);
    }
    ;
    vbargraph() {
        return this.getTypedRuleContext(VbargraphContext, 0);
    }
    ;
    hbargraph() {
        return this.getTypedRuleContext(HbargraphContext, 0);
    }
    ;
    soundfile() {
        return this.getTypedRuleContext(SoundfileContext, 0);
    }
    ;
    fpar() {
        return this.getTypedRuleContext(FparContext, 0);
    }
    ;
    fseq() {
        return this.getTypedRuleContext(FseqContext, 0);
    }
    ;
    fsum() {
        return this.getTypedRuleContext(FsumContext, 0);
    }
    ;
    fprod() {
        return this.getTypedRuleContext(FprodContext, 0);
    }
    ;
    finputs() {
        return this.getTypedRuleContext(FinputsContext, 0);
    }
    ;
    foutputs() {
        return this.getTypedRuleContext(FoutputsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterPrimitive(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitPrimitive(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitPrimitive(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PrimitiveContext = PrimitiveContext;
class FfunctionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_ffunction;
        this.sign = null; // SignatureContext
        this.header = null; // FstringContext
        this.str = null; // StringContext
    }
    FFUNCTION() {
        return this.getToken(FaustParser.FFUNCTION, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    signature() {
        return this.getTypedRuleContext(SignatureContext, 0);
    }
    ;
    fstring() {
        return this.getTypedRuleContext(FstringContext, 0);
    }
    ;
    string() {
        return this.getTypedRuleContext(StringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFfunction(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFfunction(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFfunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FfunctionContext = FfunctionContext;
class FconstContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fconst;
        this.ctype = null; // TypeContext
        this.cname = null; // NameContext
        this.cstring = null; // FstringContext
    }
    FCONSTANT() {
        return this.getToken(FaustParser.FCONSTANT, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    name() {
        return this.getTypedRuleContext(NameContext, 0);
    }
    ;
    fstring() {
        return this.getTypedRuleContext(FstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFconst(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFconst(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFconst(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FconstContext = FconstContext;
class FvariableContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fvariable;
        this.vtype = null; // TypeContext
        this.vname = null; // NameContext
        this.vstring = null; // FstringContext
    }
    FVARIABLE() {
        return this.getToken(FaustParser.FVARIABLE, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    name() {
        return this.getTypedRuleContext(NameContext, 0);
    }
    ;
    fstring() {
        return this.getTypedRuleContext(FstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFvariable(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFvariable(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFvariable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FvariableContext = FvariableContext;
class ButtonContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_button;
        this.caption = null; // UqstringContext
    }
    BUTTON() {
        return this.getToken(FaustParser.BUTTON, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterButton(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitButton(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitButton(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ButtonContext = ButtonContext;
class CheckboxContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_checkbox;
        this.caption = null; // UqstringContext
    }
    CHECKBOX() {
        return this.getToken(FaustParser.CHECKBOX, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterCheckbox(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitCheckbox(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitCheckbox(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CheckboxContext = CheckboxContext;
class VsliderContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_vslider;
        this.caption = null; // UqstringContext
        this.initial = null; // ArgumentContext
        this.min = null; // ArgumentContext
        this.max = null; // ArgumentContext
        this.step = null; // ArgumentContext
    }
    VSLIDER() {
        return this.getToken(FaustParser.VSLIDER, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterVslider(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitVslider(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitVslider(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VsliderContext = VsliderContext;
class HsliderContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_hslider;
        this.caption = null; // UqstringContext
        this.initial = null; // ArgumentContext
        this.min = null; // ArgumentContext
        this.max = null; // ArgumentContext
        this.step = null; // ArgumentContext
    }
    HSLIDER() {
        return this.getToken(FaustParser.HSLIDER, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterHslider(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitHslider(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitHslider(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.HsliderContext = HsliderContext;
class NentryContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_nentry;
        this.caption = null; // UqstringContext
        this.initial = null; // ArgumentContext
        this.min = null; // ArgumentContext
        this.max = null; // ArgumentContext
        this.step = null; // ArgumentContext
    }
    NENTRY() {
        return this.getToken(FaustParser.NENTRY, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterNentry(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitNentry(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitNentry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NentryContext = NentryContext;
class VgroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_vgroup;
        this.caption = null; // UqstringContext
        this.expr = null; // ExpressionContext
    }
    VGROUP() {
        return this.getToken(FaustParser.VGROUP, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterVgroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitVgroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitVgroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VgroupContext = VgroupContext;
class HgroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_hgroup;
        this.caption = null; // UqstringContext
        this.expr = null; // ExpressionContext
    }
    HGROUP() {
        return this.getToken(FaustParser.HGROUP, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterHgroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitHgroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitHgroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.HgroupContext = HgroupContext;
class TgroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_tgroup;
        this.caption = null; // UqstringContext
        this.expr = null; // ExpressionContext
    }
    TGROUP() {
        return this.getToken(FaustParser.TGROUP, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterTgroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitTgroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitTgroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TgroupContext = TgroupContext;
class VbargraphContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_vbargraph;
        this.caption = null; // UqstringContext
        this.min = null; // ArgumentContext
        this.max = null; // ArgumentContext
    }
    VBARGRAPH() {
        return this.getToken(FaustParser.VBARGRAPH, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterVbargraph(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitVbargraph(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitVbargraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VbargraphContext = VbargraphContext;
class HbargraphContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_hbargraph;
        this.caption = null; // UqstringContext
        this.min = null; // ArgumentContext
        this.max = null; // ArgumentContext
    }
    HBARGRAPH() {
        return this.getToken(FaustParser.HBARGRAPH, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterHbargraph(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitHbargraph(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitHbargraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.HbargraphContext = HbargraphContext;
class SoundfileContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_soundfile;
        this.caption = null; // UqstringContext
        this.outs = null; // ArgumentContext
    }
    SOUNDFILE() {
        return this.getToken(FaustParser.SOUNDFILE, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    uqstring() {
        return this.getTypedRuleContext(UqstringContext, 0);
    }
    ;
    argument() {
        return this.getTypedRuleContext(ArgumentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterSoundfile(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitSoundfile(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitSoundfile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SoundfileContext = SoundfileContext;
class FparContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fpar;
        this.op = null; // Token
        this.id = null; // IdentContext
        this.arg = null; // ArgumentContext
        this.expr = null; // ExpressionContext
    }
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    IPAR() {
        return this.getToken(FaustParser.IPAR, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    argument() {
        return this.getTypedRuleContext(ArgumentContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFpar(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFpar(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFpar(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FparContext = FparContext;
class FseqContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fseq;
        this.op = null; // Token
        this.id = null; // IdentContext
        this.arg = null; // ArgumentContext
        this.expr = null; // ExpressionContext
    }
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    ISEQ() {
        return this.getToken(FaustParser.ISEQ, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    argument() {
        return this.getTypedRuleContext(ArgumentContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFseq(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFseq(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFseq(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FseqContext = FseqContext;
class FsumContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fsum;
        this.op = null; // Token
        this.id = null; // IdentContext
        this.arg = null; // ArgumentContext
        this.expr = null; // ExpressionContext
    }
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    ISUM() {
        return this.getToken(FaustParser.ISUM, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    argument() {
        return this.getTypedRuleContext(ArgumentContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFsum(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFsum(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFsum(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FsumContext = FsumContext;
class FprodContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.PAR);
            }
            else {
                return this.getToken(FaustParser.PAR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fprod;
        this.op = null; // Token
        this.id = null; // IdentContext
        this.arg = null; // ArgumentContext
        this.expr = null; // ExpressionContext
    }
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    IPROD() {
        return this.getToken(FaustParser.IPROD, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    argument() {
        return this.getTypedRuleContext(ArgumentContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFprod(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFprod(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFprod(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FprodContext = FprodContext;
class FinputsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_finputs;
        this.expr = null; // ExpressionContext
    }
    INPUTS() {
        return this.getToken(FaustParser.INPUTS, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFinputs(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFinputs(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFinputs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FinputsContext = FinputsContext;
class FoutputsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_foutputs;
        this.expr = null; // ExpressionContext
    }
    OUTPUTS() {
        return this.getToken(FaustParser.OUTPUTS, 0);
    }
    ;
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFoutputs(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFoutputs(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFoutputs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FoutputsContext = FoutputsContext;
class CaseruleContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_caserule;
        this.args = null; // ArglistContext
        this.expr = null; // ExpressionContext
    }
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    ARROW() {
        return this.getToken(FaustParser.ARROW, 0);
    }
    ;
    ENDDEF() {
        return this.getToken(FaustParser.ENDDEF, 0);
    }
    ;
    arglist() {
        return this.getTypedRuleContext(ArglistContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterCaserule(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitCaserule(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitCaserule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CaseruleContext = CaseruleContext;
class IdentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_ident;
        this.identname = null; // Token
    }
    IDENT() {
        return this.getToken(FaustParser.IDENT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterIdent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitIdent(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitIdent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IdentContext = IdentContext;
class UqstringContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_uqstring;
    }
    STRING() {
        return this.getToken(FaustParser.STRING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterUqstring(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitUqstring(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitUqstring(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UqstringContext = UqstringContext;
class FstringContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fstring;
        this.str = null; // Token
    }
    STRING() {
        return this.getToken(FaustParser.STRING, 0);
    }
    ;
    FSTRING() {
        return this.getToken(FaustParser.FSTRING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFstring(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFstring(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFstring(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FstringContext = FstringContext;
class VallistContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_vallist;
        this.list = null; // VallistContext
        this.n = null; // NumberContext
    }
    number() {
        return this.getTypedRuleContext(NumberContext, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    vallist() {
        return this.getTypedRuleContext(VallistContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterVallist(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitVallist(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitVallist(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.VallistContext = VallistContext;
class NumberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_number;
        this.n = null; // Token
        this.sign = null; // Token
    }
    INT() {
        return this.getToken(FaustParser.INT, 0);
    }
    ;
    FLOAT() {
        return this.getToken(FaustParser.FLOAT, 0);
    }
    ;
    ADD() {
        return this.getToken(FaustParser.ADD, 0);
    }
    ;
    SUB() {
        return this.getToken(FaustParser.SUB, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterNumber(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitNumber(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitNumber(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NumberContext = NumberContext;
class StringContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_string;
        this.s = null; // Token
    }
    STRING() {
        return this.getToken(FaustParser.STRING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterString(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitString(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StringContext = StringContext;
class NameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_name;
        this.n = null; // Token
    }
    IDENT() {
        return this.getToken(FaustParser.IDENT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NameContext = NameContext;
class TypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_type;
        this.intFloatType = null; // Token
    }
    INTCAST() {
        return this.getToken(FaustParser.INTCAST, 0);
    }
    ;
    FLOATCAST() {
        return this.getToken(FaustParser.FLOATCAST, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypeContext = TypeContext;
class SignatureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_signature;
        this.fntype = null; // TypeContext
        this.fn = null; // FunContext
        this.fntypelist = null; // TypelistContext
    }
    LPAR() {
        return this.getToken(FaustParser.LPAR, 0);
    }
    ;
    RPAR() {
        return this.getToken(FaustParser.RPAR, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    fun() {
        return this.getTypedRuleContext(FunContext, 0);
    }
    ;
    typelist() {
        return this.getTypedRuleContext(TypelistContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterSignature(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitSignature(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitSignature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SignatureContext = SignatureContext;
class FunContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.IDENT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.IDENT);
            }
            else {
                return this.getToken(FaustParser.IDENT, i);
            }
        };
        this.OR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(FaustParser.OR);
            }
            else {
                return this.getToken(FaustParser.OR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_fun;
        this.sp = null; // Token
        this.dp = null; // Token
        this.qp = null; // Token
    }
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterFun(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitFun(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitFun(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FunContext = FunContext;
class TypelistContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FaustParser.RULE_typelist;
        this.fntypelist = null; // TypelistContext
        this.fntype = null; // TypeContext
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    PAR() {
        return this.getToken(FaustParser.PAR, 0);
    }
    ;
    typelist() {
        return this.getTypedRuleContext(TypelistContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.enterTypelist(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof FaustParserListener_js_1.default) {
            listener.exitTypelist(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof FaustParserVisitor_js_1.default) {
            return visitor.visitTypelist(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TypelistContext = TypelistContext;
FaustParser.VariantstatementContext = VariantstatementContext;
FaustParser.ProgramContext = ProgramContext;
FaustParser.VariantContext = VariantContext;
FaustParser.ImportStatementContext = ImportStatementContext;
FaustParser.StatementContext = StatementContext;
FaustParser.DefinitionContext = DefinitionContext;
FaustParser.DefnameContext = DefnameContext;
FaustParser.ArglistContext = ArglistContext;
FaustParser.ReclistContext = ReclistContext;
FaustParser.RecinitionContext = RecinitionContext;
FaustParser.RecnameContext = RecnameContext;
FaustParser.DeflistContext = DeflistContext;
FaustParser.ArgumentContext = ArgumentContext;
FaustParser.ParamsContext = ParamsContext;
FaustParser.WithdefContext = WithdefContext;
FaustParser.ExpressionContext = ExpressionContext;
FaustParser.InfixexprContext = InfixexprContext;
FaustParser.PrimitiveContext = PrimitiveContext;
FaustParser.FfunctionContext = FfunctionContext;
FaustParser.FconstContext = FconstContext;
FaustParser.FvariableContext = FvariableContext;
FaustParser.ButtonContext = ButtonContext;
FaustParser.CheckboxContext = CheckboxContext;
FaustParser.VsliderContext = VsliderContext;
FaustParser.HsliderContext = HsliderContext;
FaustParser.NentryContext = NentryContext;
FaustParser.VgroupContext = VgroupContext;
FaustParser.HgroupContext = HgroupContext;
FaustParser.TgroupContext = TgroupContext;
FaustParser.VbargraphContext = VbargraphContext;
FaustParser.HbargraphContext = HbargraphContext;
FaustParser.SoundfileContext = SoundfileContext;
FaustParser.FparContext = FparContext;
FaustParser.FseqContext = FseqContext;
FaustParser.FsumContext = FsumContext;
FaustParser.FprodContext = FprodContext;
FaustParser.FinputsContext = FinputsContext;
FaustParser.FoutputsContext = FoutputsContext;
FaustParser.CaseruleContext = CaseruleContext;
FaustParser.IdentContext = IdentContext;
FaustParser.UqstringContext = UqstringContext;
FaustParser.FstringContext = FstringContext;
FaustParser.VallistContext = VallistContext;
FaustParser.NumberContext = NumberContext;
FaustParser.StringContext = StringContext;
FaustParser.NameContext = NameContext;
FaustParser.TypeContext = TypeContext;
FaustParser.SignatureContext = SignatureContext;
FaustParser.FunContext = FunContext;
FaustParser.TypelistContext = TypelistContext;
